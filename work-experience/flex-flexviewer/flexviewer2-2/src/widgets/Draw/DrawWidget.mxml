<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010 ESRI
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:esri="http://www.esri.com/2008/ags"
                   xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:mxeffects="com.adobe.ac.mxeffects.*"
                   xmlns:flash="flash.text.*"
                   xmlns:viewer="com.esri.viewer.*"
                   xmlns:widgets="widgets.*"
                   x="600" y="300"
                   widgetConfigLoaded="init()">

    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.SpatialReference;
            import com.esri.ags.events.DrawEvent;
            import com.esri.ags.events.EditEvent;
            import com.esri.ags.events.GeometryServiceEvent;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.geometry.Polygon;
            import com.esri.ags.geometry.Polyline;
            import com.esri.ags.layers.GraphicsLayer;
            import com.esri.ags.symbols.FillSymbol;
            import com.esri.ags.symbols.SimpleFillSymbol;
            import com.esri.ags.symbols.SimpleLineSymbol;
            import com.esri.ags.symbols.SimpleMarkerSymbol;
            import com.esri.ags.symbols.Symbol;
            import com.esri.ags.symbols.TextSymbol;
            import com.esri.ags.tasks.supportClasses.AreasAndLengthsParameters;
            import com.esri.ags.tasks.supportClasses.LengthsParameters;
            import com.esri.ags.tools.DrawTool;
            import com.esri.viewer.AppEvent;
            import com.esri.viewer.ViewerContainer;

            import mx.controls.Alert;
            import mx.core.FlexGlobals;
            import mx.events.ColorPickerEvent;
            import mx.events.NumericStepperEvent;

            import org.osmf.events.GatewayChangeEvent;

            import spark.events.IndexChangeEvent;

            // constants
            private const ICON_URL:String = "assets/images/";
            private const TEXT_MODE:String = "text";

            //labels

            // points
            [Bindable]
            private var drawPointLabel:String;
            [Bindable]
            private var addTextLabel:String;
            [Bindable]
            private var markerAlphaLabel:String;
            [Bindable]
            private var markerColorLabel:String;
            [Bindable]
            private var markerSizeLabel:String;
            [Bindable]
            private var markerStyleLabel:String;
            [Bindable]
            private var markerOutlineColorLabel:String;
            [Bindable]
            private var markerOutlineWidthLabel:String;
            [Bindable]
            private var textLabel:String;
            [Bindable]
            private var textColorLabel:String;
            [Bindable]
            private var textFontLabel:String;
            [Bindable]
            private var textSizeLabel:String;
            [Bindable]
            private var textBoldLabel:String;
            [Bindable]
            private var textBoldTooltip:String;
            [Bindable]
            private var textItalicLabel:String;
            [Bindable]
            private var textItalicTooltip:String;
            [Bindable]
            private var textUnderlineLabel:String;
            [Bindable]
            private var textUnderlineTooltip:String;

            // lines
            [Bindable]
            private var drawLineLabel:String;
            [Bindable]
            private var drawFreehandLineLabel:String;
            [Bindable]
            private var lineAlphaLabel:String;
            [Bindable]
            private var lineColorLabel:String;
            [Bindable]
            private var lineStyleLabel:String;
            [Bindable]
            private var lineWidthLabel:String;

            // polygons
            [Bindable]
            private var drawPolygonLabel:String;
            [Bindable]
            private var drawFreehandPolygonLabel:String;
            [Bindable]
            private var drawRectangleLabel:String;
            [Bindable]
            private var drawCircleLabel:String;
            [Bindable]
            private var drawEllipseLabel:String;
            [Bindable]
            private var fillAlphaLabel:String;
            [Bindable]
            private var fillColorLabel:String;
            [Bindable]
            private var fillStyleLabel:String;
            [Bindable]
            private var fillOutlineColorLabel:String;
            [Bindable]
            private var fillOutlineWidthLabel:String;

            [Bindable]
            private var clearLabel:String;
            private var clearFeatureLabel:String;

            private var areaLabel:String;
            [Bindable]
            private var areaUnitsLabel:String;
            [Bindable]
            private var distanceUnitsLabel:String;
            [Bindable]
            private var showMeasurements:Boolean;
            [Bindable]
            private var showmeasurementsLabel:String;

            [Bindable]
            private var configArea:ArrayList;
            [Bindable]
            private var configDistance:ArrayList;
            [Bindable]
            private var graphicsLayer:GraphicsLayer;
            [Bindable]
            private var drawingPoint:Boolean;
            [Bindable]
            private var addingText:Boolean;
            [Bindable]
            private var drawingLine:Boolean;
            [Bindable]
            private var drawingPolygon:Boolean;

            private var drawMode:String;
            private var drawSymbol:Symbol;
            private var finishDrawing:Boolean;
            private var lengthLabel:String;
            private var perimeterLabel:String;
            private var measurePt:MapPoint;
            private var spatialref:Number = 102003;
            private var drawType:String;
            private var drawStatus:String;
            private var selectedDrawingIcon:Image;
            private var lastDrawnGraphic:Graphic;
            private var lastActiveEdit:String = "moveEditVertices";

            private function init():void
            {
                graphicsLayer = new GraphicsLayer();
                graphicsLayer.name = "Draw Features";
                map.addLayer(graphicsLayer);
                if (configXML)
                {
                    // drawing labels

                    // points
                    drawPointLabel = configXML.labels.drawpointlabel || getDefaultString("drawPointLabel");
                    addTextLabel = configXML.labels.addtextlabel || getDefaultString("addTextLabel");
                    markerColorLabel = configXML.labels.markercolorlabel || getDefaultString("markerColorLabel");
                    markerAlphaLabel = configXML.labels.markeralphalabel || getDefaultString("markerAlphaLabel");
                    markerSizeLabel = configXML.labels.markersizelabel || getDefaultString("markerSizeLabel");
                    markerStyleLabel = configXML.labels.markerstylelabel || getDefaultString("markerStyleLabel");
                    markerOutlineColorLabel = configXML.labels.markeroutlinecolorlabel || getDefaultString("markerOutlineColorLabel");
                    markerOutlineWidthLabel = configXML.labels.markeroutlinewidthlabel || getDefaultString("markerOutlineWidthLabel");

                    textLabel = configXML.labels.textlabel || getDefaultString("textLabel");
                    textColorLabel = configXML.labels.textcolorlabel || getDefaultString("textColorLabel");
                    textFontLabel = configXML.labels.textfontlabel || getDefaultString("textFontLabel");
                    textSizeLabel = configXML.labels.sizelabel || getDefaultString("textSizeLabel");
                    textBoldLabel = configXML.labels.textboldlabel || getDefaultString("textBoldLabel");
                    textBoldTooltip = configXML.labels.textboldtooltip || getDefaultString("textBoldTooltip");
                    textItalicLabel = configXML.labels.textitaliclabel || getDefaultString("textItalicLabel");
                    textItalicTooltip = configXML.labels.textitalictooltip || getDefaultString("textItalicTooltip");
                    textUnderlineLabel = configXML.labels.textunderlinelabel || getDefaultString("textUnderlineLabel");
                    textUnderlineTooltip = configXML.labels.textunderlinetooltip || getDefaultString("textUnderlineTooltip");

                    // lines
                    drawLineLabel = configXML.labels.drawlinelabel || getDefaultString("drawLineLabel");
                    drawFreehandLineLabel = configXML.labels.drawfreehandlinelabel || getDefaultString("drawFreehandLineLabel");
                    lineAlphaLabel = configXML.labels.linealphalabel || getDefaultString("lineAlphaLabel");
                    lineColorLabel = configXML.labels.linecolorlabel || getDefaultString("lineColorLabel");
                    lineStyleLabel = configXML.labels.linestylelabel || getDefaultString("lineStyleLabel");
                    lineWidthLabel = configXML.labels.linewidthlabel || getDefaultString("lineWidthLabel");

                    // polygons
                    drawPolygonLabel = configXML.labels.drawpolygonlabel || getDefaultString("drawPolygonLabel");
                    drawFreehandPolygonLabel = configXML.labels.drawfreehandpolygonlabel || getDefaultString("drawFreehandPolygonLabel");
                    drawRectangleLabel = configXML.labels.drawrectanglelabel || getDefaultString("drawRectangleLabel");
                    drawCircleLabel = configXML.labels.drawcirclelabel || getDefaultString("drawCircleLabel");
                    drawEllipseLabel = configXML.labels.drawellipselabel || getDefaultString("drawEllipseLabel");
                    fillAlphaLabel = configXML.labels.fillalphaLlabel || getDefaultString("fillAlphaLabel");
                    fillColorLabel = configXML.labels.fillcolorlabel || getDefaultString("fillColorLabel");
                    fillStyleLabel = configXML.labels.fillstylelabel || getDefaultString("fillStyleLabel");
                    fillOutlineColorLabel = configXML.labels.filloutlinecolorlabel || getDefaultString("fillOutlineColorLabel");
                    fillOutlineWidthLabel = configXML.labels.filloutlinewidthlabel || getDefaultString("fillOutlineWidthLabel");

                    clearLabel = configXML.labels.clearlabel || getDefaultString("drawClearLabel");
                    clearFeatureLabel = configXML.labels.clearfeaturelabel || getDefaultString("clearLabel");

                    // measurement labels
                    showmeasurementsLabel = configXML.labels.showmeasurementslabel || getDefaultString("showMeasurementsLabel");
                    distanceUnitsLabel = configXML.labels.distanceunitslabel || getDefaultString("distanceUnitsLabel");
                    areaUnitsLabel = configXML.labels.areaunitslabel || getDefaultString("areaUnitsLabel");
                    areaLabel = configXML.labels.arealabel || getDefaultString("areaLabel");
                    perimeterLabel = configXML.labels.perimeterlabel || getDefaultString("perimeterLabel");
                    lengthLabel = configXML.labels.lengthlabel || getDefaultString("lengthLabel");

                    if (Number(configXML.spatialref) > 0)
                    {
                        spatialref = Number(configXML.spatialref);
                    }

                    geometryService.url = configXML.geometryservice;
                    var distanceList:XMLList = configXML..distanceunit;
                    var areaList:XMLList = configXML..areaunit;
                    var i:Number;
                    configDistance = new ArrayList()
                    for (i = 0; i < distanceList.length(); i++)
                    {
                        var dLabel:String = distanceList[i];
                        var dAbbr:String = distanceList[i].@abbr;
                        var dConversion:Number = Number(distanceList[i].@conversion);
                        var dUnit:Object =
                            {
                                label: dLabel,
                                abbr: dAbbr,
                                conversion: dConversion
                            }
                        configDistance.addItem(dUnit);
                    }
                    cboDistance.dataProvider = configDistance;
                    configArea = new ArrayList();
                    for (i = 0; i < areaList.length(); i++)
                    {
                        var aLabel:String = areaList[i];
                        var aAbbr:String = areaList[i].@abbr;
                        var aConversion:Number = Number(areaList[i].@conversion);
                        var aUnit:Object =
                            {
                                label: aLabel,
                                abbr: aAbbr,
                                conversion: aConversion
                            }
                        configArea.addItem(aUnit);
                    }
                    cboArea.dataProvider = configArea;
                }
                ViewerContainer.addEventListener(AppEvent.DATA_PUBLISH, sharedDataUpdated);
            }

            private function activateDrawTool(event:MouseEvent):void
            {
                addSharedData("Deactivate_DrawTool", null); // to be able to deactivate drawTool on other widgets
                editTool.deactivate();
                lastActiveEdit = "moveEditVertices";

                // apply glow
                selectedDrawingIcon = Image(event.currentTarget);
                clearSelectionFilter();
                selectedDrawingIcon.filters = [ glowFilter ];

                finishDrawing = false;
                showMeasurements = false;
                drawType = selectedDrawingIcon.name;
                switch (drawType)
                {
                    case DrawTool.MAPPOINT:
                    {
                        drawingPolygon = drawingLine = false;
                        addingText = selectedDrawingIcon.id == "text";
                        drawingPoint = !addingText;

                        drawMode = addingText ? TEXT_MODE : null;
                        drawStatus = (drawMode == TEXT_MODE) ? addTextLabel : drawPointLabel;
                        setMapAction(drawType, drawStatus, null, drawEnd);
                        break;
                    }
                    case DrawTool.POLYLINE:
                    {
                        drawingPoint = addingText = drawingPolygon = false;
                        drawingLine = true;
                        showMeasurements = true;

                        drawStatus = drawLineLabel;
                        setMapAction(drawType, drawStatus, lineSymbol, drawEnd);
                        break;
                    }
                    case DrawTool.FREEHAND_POLYLINE:
                    {
                        drawingPoint = addingText = drawingPolygon = false;
                        drawingLine = true;
                        showMeasurements = true;

                        drawStatus = drawFreehandLineLabel;
                        setMapAction(drawType, drawStatus, lineSymbol, drawEnd);
                        break;
                    }
                    case DrawTool.EXTENT:
                    {
                        addingText = drawingPoint = drawingLine = false;
                        drawingPolygon = true;
                        showMeasurements = true;

                        drawStatus = drawRectangleLabel;
                        setMapAction(drawType, drawStatus, fillSymbol, drawEnd);
                        break;
                    }
                    case DrawTool.CIRCLE:
                    {
                        addingText = drawingPoint = drawingLine = false;
                        drawingPolygon = true;
                        showMeasurements = true;

                        drawStatus = drawCircleLabel;
                        setMapAction(drawType, drawStatus, fillSymbol, drawEnd);
                        break;
                    }
                    case DrawTool.ELLIPSE:
                    {
                        addingText = drawingPoint = drawingLine = false;
                        drawingPolygon = true;
                        showMeasurements = true;

                        drawStatus = drawEllipseLabel;
                        setMapAction(drawType, drawStatus, fillSymbol, drawEnd);
                        break;
                    }
                    case DrawTool.POLYGON:
                    {
                        addingText = drawingPoint = drawingLine = false;
                        drawingPolygon = true;
                        showMeasurements = true;

                        drawStatus = drawPolygonLabel;
                        setMapAction(drawType, drawStatus, fillSymbol, drawEnd);
                        break;
                    }
                    case DrawTool.FREEHAND_POLYGON:
                    {
                        addingText = drawingPoint = drawingLine = false;
                        drawingPolygon = true;
                        showMeasurements = true;

                        drawStatus = drawFreehandPolygonLabel;
                        setMapAction(drawType, drawStatus, fillSymbol, drawEnd);
                        break;
                    }
                }
            }

            private function onFault(info:Object, token:Object = null):void
            {
                Alert.show(info.toString(), wTemplate.widgetTitle);
            }

            private function drawEnd(event:DrawEvent):void
            {
                // deactivate the draw tool
                finishDrawing = true;

                selectedDrawingIcon = null;
                clearSelectionFilter();
                event.target.deactivate();
                var outSR:SpatialReference = new SpatialReference(spatialref);
                var geom:Geometry = event.graphic.geometry;

                lastDrawnGraphic = new Graphic(geom);
                lastDrawnGraphic.autoMoveToTop = false;
                var customContextMenu:ContextMenu = new ContextMenu();
                customContextMenu.hideBuiltInItems();
                var menuItem:ContextMenuItem = new ContextMenuItem(clearFeatureLabel);
                menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onContextMenuDelete);
                customContextMenu.customItems.push(menuItem);
                lastDrawnGraphic.contextMenu = customContextMenu;

                lastDrawnGraphic.addEventListener(MouseEvent.CLICK, graphicClickHandler);
                switch (geom.type)
                {
                    case Geometry.MAPPOINT:
                    {
                        if (drawMode == TEXT_MODE)
                        {
                            var textSymbol:TextSymbol = new TextSymbol(txtLabel.text);
                            var txtFormat:TextFormat = new TextFormat(textFont.selectedItem.font, numTextSize.value, cpText.selectedColor, bold.selected, italic.selected, underline.selected);
                            textSymbol.textFormat = txtFormat;
                            lastDrawnGraphic.symbol = textSymbol;
                        }
                        else
                        {
                            lastDrawnGraphic.symbol = new SimpleMarkerSymbol(markerStyle.selectedItem.style, numMarkerSize.value, cpMarker.selectedColor, numMarkerAlpha.value, 0, 0, 0, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpMarkerOutline.selectedColor, 1, numMarkerOutlineWidth.value));
                        }
                        break;
                    }
                    case Geometry.POLYLINE:
                    {
                        lastDrawnGraphic.symbol = new SimpleLineSymbol(lineStyle.selectedItem.style, cpLine.selectedColor, numLineAlpha.value, numLineWidth.value);
                        if (chkMeasurements.selected)
                        {
                            geometryService.project([ geom ], outSR);
                            var polyline:Polyline = geom as Polyline;
                            measurePt = polyline.extent.center;
                        }
                        break;
                    }
                    case Geometry.POLYGON:
                    {
                        lastDrawnGraphic.symbol = new SimpleFillSymbol(fillStyle.selectedItem.style, cpFill.selectedColor, numFillAlpha.value, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpFillOutline.selectedColor, 1, numFillOutlineWidth.value));
                        if (chkMeasurements.selected)
                        {
                            geometryService.project([ geom ], outSR);
                            var polygon:Polygon = geom as Polygon;
                            measurePt = polygon.extent.center;
                        }
                        break;
                    }
                    case Geometry.EXTENT:
                    {
                        lastDrawnGraphic.symbol = new SimpleFillSymbol(fillStyle.selectedItem.style, cpFill.selectedColor, numFillAlpha.value, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpFillOutline.selectedColor, 1, numFillOutlineWidth.value));
                        if (chkMeasurements.selected)
                        {
                            geometryService.project([ geom ], outSR);
                            var extent:Extent = geom as Extent;
                            measurePt = extent.center;
                        }
                        break;
                    }
                }
                graphicsLayer.add(lastDrawnGraphic);
            }

            private function onContextMenuDelete(event:ContextMenuEvent):void
            {
                graphicsLayer.remove(Graphic(event.contextMenuOwner));
                // also remove measurement label if any
                graphicsLayer.remove(getMeasurementGraphic(Graphic(event.contextMenuOwner)));
                editTool.deactivate();
            }

            private function projectCompleteHandler(event:GeometryServiceEvent):void
            {
                var geom:Geometry = (event.result as Array)[0];
                var lengthsParameters:LengthsParameters = new LengthsParameters();
                var areasAndLengthsParameters:AreasAndLengthsParameters = new AreasAndLengthsParameters();
                switch (geom.type)
                {
                    case Geometry.POLYLINE:
                    {
                        var pLine:Polyline = Polyline(geom);
                        lengthsParameters.geodesic = true;
                        lengthsParameters.polylines = [ pLine ];
                        geometryService.lengths(lengthsParameters);
                        break;
                    }
                    case Geometry.POLYGON:
                    {
                        var pGon:Polygon = Polygon(geom);
                        areasAndLengthsParameters.polygons = [ pGon ];
                        geometryService.areasAndLengths(areasAndLengthsParameters);
                        break;
                    }
                    case Geometry.EXTENT:
                    {
                        var extent:Extent = Extent(geom);

                        // convert it to a polygon for measurment
                        const arrPoints:Array = [
                            new MapPoint(extent.xmin, extent.ymin),
                            new MapPoint(extent.xmin, extent.ymax),
                            new MapPoint(extent.xmax, extent.ymax),
                            new MapPoint(extent.xmax, extent.ymin),
                            new MapPoint(extent.xmin, extent.ymin)
                            ];

                        var polygon:Polygon = new Polygon();
                        polygon.addRing(arrPoints);
                        polygon.spatialReference = extent.spatialReference;

                        areasAndLengthsParameters.polygons = [ polygon ];
                        geometryService.areasAndLengths(areasAndLengthsParameters);
                        break;
                    }
                }
            }

            private function arealengthsCompleteHandler(event:GeometryServiceEvent):void
            {
                var area:Number = event.result.areas[0]; //event.arealengths.areas[0];
                var length:Number = event.result.lengths[0]; // or (event.result as Array)[0]; //event.arealengths.lengths[0];
                var abbrArea:String = cboArea.selectedItem.abbr;
                var convArea:Number = cboArea.selectedItem.conversion;
                var abbrDist:String = cboDistance.selectedItem.abbr;
                var convDist:Number = cboDistance.selectedItem.conversion;
                var label:String = areaLabel + " " + numFormatter.format(area * convArea) + " " + abbrArea;
                label += "\n" + perimeterLabel + " " + numFormatter.format(length * convDist) + " " + abbrDist;
                addDrawLabel(label, lastDrawnGraphic);
            }

            private function lengthsCompleteHandler(event:GeometryServiceEvent):void
            {
                var length:Number = (event.result as Array)[0];
                var abbrDist:String = cboDistance.selectedItem.abbr;
                var convDist:Number = cboDistance.selectedItem.conversion;
                var label:String = lengthLabel + " " + numFormatter.format(length * convDist) + " " + abbrDist;
                addDrawLabel(label, lastDrawnGraphic);
            }

            private function addDrawLabel(label:String, lastDrawnGraphic:Graphic):void
            {
                var txtSym:TextSymbol = new TextSymbol(label);
                txtSym.yoffset = 8;
                var txtFormat:TextFormat = new TextFormat("Arial", 12, 0x000000, true); // black label
                txtSym.textFormat = txtFormat;
                // also remove measurement label if any
                graphicsLayer.remove(getMeasurementGraphic(lastDrawnGraphic));
                var gra:Graphic = new Graphic(measurePt);
                gra.autoMoveToTop = false;
                gra.name = lastDrawnGraphic.id;
                gra.symbol = txtSym;
                graphicsLayer.add(gra);
            }

            private function clear():void
            {
                graphicsLayer.clear();
                editTool.deactivate();
            }

            private function widgetClosedHandler(event:Event):void
            {
                graphicsLayer.visible = false;

                setMapAction(null, null, null, null); // deactivate drawTool

                finishDrawing = true;
                if (selectedDrawingIcon)
                {
                    selectedDrawingIcon = null;
                }
            }

            private function widgetOpenedHandler(event:Event):void
            {
                if (graphicsLayer)
                {
                    graphicsLayer.visible = true;
                }
            }

            private function showStateDraw():void
            {
                this.currentState = "draw";
            }

            private function showStateMeasurements():void
            {
                this.currentState = "measurements";
            }

            private function fillSymbolChangeHandler():void
            {
                if (!finishDrawing)
                {
                    setMapAction(drawType, drawStatus, fillSymbol, drawEnd);
                }
            }

            private function lineSymbolChangeHandler():void
            {
                if (!finishDrawing)
                {
                    setMapAction(drawType, drawStatus, lineSymbol, drawEnd);
                }
            }

            private function iconRollOverHandler(event:MouseEvent):void
            {
                clearSelectionFilter();
                event.target.filters = [ glowFilter ];
            }

            private function iconRollOutHandler(event:MouseEvent):void
            {
                clearSelectionFilter();
            }

            private function clearSelectionFilter():void
            {
                for (var i:int = 0; i < drawImageGroup.numChildren; i++)
                {
                    if (drawImageGroup.getChildAt(i).filters && drawImageGroup.getChildAt(i).filters.length > 0)
                    {
                        if (!(selectedDrawingIcon && drawImageGroup.getChildAt(i) === selectedDrawingIcon))
                        {
                            drawImageGroup.getChildAt(i).filters = [];
                        }
                    }
                }
            }

            private function sharedDataUpdated(event:AppEvent):void
            {
                var data:Object = event.data;

                if (data.key == "Deactivate_DrawTool")
                {
                    setMapAction(null, null, null, null);
                    editTool.deactivate();
                    if (selectedDrawingIcon)
                    {
                        selectedDrawingIcon.filters = [];
                        selectedDrawingIcon = null;
                    }
                }
            }

            private function graphicClickHandler(event:MouseEvent):void
            {
                var editGraphic:Graphic = Graphic(event.target);
                if (editGraphic.geometry is Polyline || editGraphic.geometry is Polygon)
                {
                    if (lastActiveEdit == "moveEditVertices")
                    {
                        lastActiveEdit = "rotateShape";
                        editTool.activate(EditTool.EDIT_VERTICES | EditTool.MOVE, [ editGraphic ]);
                    }
                    else
                    {
                        lastActiveEdit = "moveEditVertices";
                        editTool.activate(EditTool.MOVE | EditTool.SCALE | EditTool.ROTATE, [ editGraphic ]);
                    }
                }
                else
                {
                    editTool.activate(EditTool.EDIT_VERTICES | EditTool.MOVE, [ editGraphic ]);
                }
                if (chkMeasurements.selected)
                {
                    editTool.addEventListener(EditEvent.GHOST_VERTEX_MOUSE_DOWN, hideMeasureLabel);
                    editTool.addEventListener(EditEvent.CONTEXT_MENU_SELECT, hideMeasureLabel);
                    editTool.addEventListener(EditEvent.VERTEX_MOVE_START, hideMeasureLabel);

                    editTool.addEventListener(EditEvent.GRAPHICS_MOVE_START, hideMeasureLabel);
                    editTool.addEventListener(EditEvent.GRAPHIC_ROTATE_START, hideMeasureLabel);
                    editTool.addEventListener(EditEvent.GRAPHIC_SCALE_START, hideMeasureLabel);

                    editTool.addEventListener(EditEvent.VERTEX_ADD, editTool_vertexAddDeleteHandler);
                    editTool.addEventListener(EditEvent.VERTEX_DELETE, editTool_vertexAddDeleteHandler);
                    editTool.addEventListener(EditEvent.VERTEX_MOVE_STOP, editTool_vertexMoveStopHandler);

                    editTool.addEventListener(EditEvent.GRAPHICS_MOVE_STOP, editTool_graphicsMoveStopHandler);
                    editTool.addEventListener(EditEvent.GRAPHIC_ROTATE_STOP, editTool_graphicRotateStopHandler);
                    editTool.addEventListener(EditEvent.GRAPHIC_SCALE_STOP, editTool_graphicScaleStopHandler);
                }
            }

            private function hideMeasureLabel(event:EditEvent):void
            {
                getMeasurementGraphic(lastDrawnGraphic).visible = false;
            }

            private function editTool_vertexAddDeleteHandler(event:EditEvent):void
            {
                recalulate(event.graphic, true);
            }

            private function editTool_vertexMoveStopHandler(event:EditEvent):void
            {
                recalulate(event.graphic, true);
            }

            private function editTool_graphicsMoveStopHandler(event:EditEvent):void
            {
                recalulate(event.graphics[0], false);
            }

            private function editTool_graphicRotateStopHandler(event:EditEvent):void
            {
                recalulate(event.graphic, false);
            }

            private function editTool_graphicScaleStopHandler(event:EditEvent):void
            {
                recalulate(event.graphic, true);
            }

            private function recalulate(graphic:Graphic, calculateAreaAndLength:Boolean):void
            {
                var geom:Geometry = graphic.geometry;
                measurePt = geom.extent.center;
                if (calculateAreaAndLength)
                {
                    geometryService.project([ geom ], new SpatialReference(spatialref));
                }
                else
                {
                    var measureString:String;
                    measureString = TextSymbol(getMeasurementGraphic(graphic).symbol).text;
                    addDrawLabel(measureString, graphic);
                }
            }

            private function getMeasurementGraphic(graphic:Graphic):Graphic
            {
                var result:Graphic;
                for (var i:int = 0; i < graphicsLayer.numGraphics; )
                {
                    if (Graphic(graphicsLayer.getChildAt(i)).name == graphic.id)
                    {
                        result = Graphic(graphicsLayer.getChildAt(i));
                        break;
                    }
                    else
                    {
                        i++;
                    }
                }
                return result;
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <s:GlowFilter id="glowFilter"
                      alpha="1"
                      color="{getStyle('focusColor')}"
                      inner="true"
                      strength="2"/>
        <esri:GeometryService id="geometryService"
                              areasAndLengthsComplete="arealengthsCompleteHandler(event)"
                              fault="onFault(event)"
                              lengthsComplete="lengthsCompleteHandler(event)"
                              projectComplete="projectCompleteHandler(event)"
                              url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer"/>

        <mx:NumberFormatter id="numFormatter"
                            precision="2"
                            useThousandsSeparator="true"/>

        <esri:SimpleFillSymbol id="fillSymbol"
                               alpha="{numFillAlpha.value}"
                               color="{cpFill.selectedColor}"
                               style="{fillStyle.selectedItem.style}">
            <esri:SimpleLineSymbol width="{numFillOutlineWidth.value}" color="{cpFillOutline.selectedColor}"/>
        </esri:SimpleFillSymbol>

        <esri:SimpleLineSymbol id="lineSymbol"
                               width="{numLineWidth.value}"
                               alpha="{numLineAlpha.value}"
                               color="{cpLine.selectedColor}"
                               style="{lineStyle.selectedItem.style}"/>
        <esri:EditTool id="editTool" map="{map}"/>
    </fx:Declarations>

    <viewer:WidgetTemplate id="wTemplate"
                           width="420" height="300"
                           closed="widgetClosedHandler(event)"
                           minHeight="300"
                           minWidth="420"
                           open="widgetOpenedHandler(event)">
        <s:VGroup id="drawAndMeasure"
                  width="100%" height="100%"
                  gap="2">
            <s:HGroup id="drawImageGroup"
                      width="100%"
                      gap="2"
                      horizontalAlign="center">
                <mx:Image name="{DrawTool.MAPPOINT}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_point.png"
                          toolTip="{drawPointLabel}"
                          useHandCursor="true"/>
                <mx:Image name="{DrawTool.POLYLINE}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_line.png"
                          toolTip="{drawLineLabel}"
                          useHandCursor="true"/>
                <mx:Image name="{DrawTool.FREEHAND_POLYLINE}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_freeline.png"
                          toolTip="{drawFreehandLineLabel}"
                          useHandCursor="true"/>
                <mx:Image name="{DrawTool.EXTENT}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_rect.png"
                          toolTip="{drawRectangleLabel}"
                          useHandCursor="true"/>
                <mx:Image name="{DrawTool.CIRCLE}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_circle.png"
                          toolTip="{drawCircleLabel}"
                          useHandCursor="true"/>
                <mx:Image name="{DrawTool.ELLIPSE}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_ellipse.png"
                          toolTip="{drawEllipseLabel}"
                          useHandCursor="true"/>
                <mx:Image name="{DrawTool.POLYGON}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_poly.png"
                          toolTip="{drawPolygonLabel}"
                          useHandCursor="true"/>
                <mx:Image name="{DrawTool.FREEHAND_POLYGON}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_freepoly.png"
                          toolTip="{drawFreehandPolygonLabel}"
                          useHandCursor="true"/>
                <mx:Image id="text" name="{DrawTool.MAPPOINT}"
                          width="40" height="40"
                          buttonMode="true"
                          click="activateDrawTool(event)"
                          rollOut="iconRollOutHandler(event)"
                          rollOver="iconRollOverHandler(event)"
                          source="assets/images/i_draw_text.png"
                          toolTip="{addTextLabel}"
                          useHandCursor="true"/>
            </s:HGroup>
            <s:HGroup width="100%"
                      horizontalAlign="right"
                      paddingRight="10"
                      paddingTop="2">
                <s:Label buttonMode="true"
                         click="clear()"
                         fontWeight="bold"
                         includeInLayout="{graphicsLayer.numGraphics &gt; 0}"
                         text="{clearLabel}"
                         textDecoration="underline"
                         visible="{graphicsLayer.numGraphics &gt; 0}"/>
            </s:HGroup>
            <mx:Form id="frmDraw"
                     width="100%" height="100%"
                     paddingBottom="0"
                     verticalGap="8"
                     verticalScrollPolicy="off">
                <mx:FormItem id="txtAttribs"
                             width="100%"
                             includeInLayout="{addingText}"
                             label="{textLabel}"
                             visible="{addingText}">
                    <s:HGroup width="100%" verticalAlign="middle">
                        <mx:TextInput id="txtLabel"
                                      width="100%"
                                      text=""/>
                        <s:ToggleButton id="bold"
                                        width="32"
                                        fontWeight="bold"
                                        label="{textBoldLabel}"
                                        toolTip="{textBoldTooltip}"/>
                        <s:ToggleButton id="italic"
                                        width="32"
                                        fontStyle="italic"
                                        fontWeight="bold"
                                        label="{textItalicLabel}"
                                        toolTip="{textItalicTooltip}"/>
                        <s:ToggleButton id="underline"
                                        width="32"
                                        fontWeight="bold"
                                        label="{textUnderlineLabel}"
                                        textDecoration="underline"
                                        toolTip="{textUnderlineTooltip}"/>
                    </s:HGroup>
                </mx:FormItem>
                <mx:FormItem id="txtFont"
                             width="100%"
                             includeInLayout="{addingText}"
                             label="{textFontLabel}"
                             visible="{addingText}">
                    <s:DropDownList id="textFont"
                                    labelField="name"
                                    selectedIndex="1">
                        <s:ArrayList>
                            <fx:Object name="{getDefaultString('textFont1')}" font="{getDefaultString('textFont1')}"/>
                            <fx:Object name="{getDefaultString('textFont2')}" font="{getDefaultString('textFont2')}"/>
                            <fx:Object name="{getDefaultString('textFont3')}" font="{getDefaultString('textFont3')}"/>
                            <fx:Object name="{getDefaultString('textFont4')}" font="{getDefaultString('textFont4')}"/>
                            <fx:Object name="{getDefaultString('textFont5')}" font="{getDefaultString('textFont5')}"/>
                            <fx:Object name="{getDefaultString('textFont6')}" font="{getDefaultString('textFont6')}"/>
                        </s:ArrayList>
                    </s:DropDownList>
                </mx:FormItem>
                <mx:FormItem id="textColorSize"
                             width="100%"
                             includeInLayout="{addingText}"
                             label="{textColorLabel}"
                             visible="{addingText}">
                    <s:HGroup width="100%"
                              gap="4"
                              verticalAlign="middle">
                        <mx:ColorPicker id="cpText" selectedColor="0x3FAFDC"/>
                        <mx:Label text="{textSizeLabel}"/>
                        <mx:NumericStepper id="numTextSize"
                                           maximum="100"
                                           minimum="0"
                                           value="20"/>
                    </s:HGroup>
                </mx:FormItem>
                <mx:FormItem id="markerColorStyle"
                             width="100%"
                             includeInLayout="{drawingPoint}"
                             label="{markerColorLabel}"
                             visible="{drawingPoint}">
                    <s:HGroup width="100%"
                              gap="55"
                              verticalAlign="middle">
                        <mx:ColorPicker id="cpMarker" selectedColor="0x3FAFDC"/>
                        <s:HGroup width="100%"
                                  gap="24"
                                  verticalAlign="middle">
                            <mx:Label text="{markerStyleLabel}"/>
                            <s:DropDownList id="markerStyle"
                                            labelField="name"
                                            selectedIndex="0">
                                <s:ArrayList>
                                    <fx:Object name="{getDefaultString('markerStyleCircle')}" style="{SimpleMarkerSymbol.STYLE_CIRCLE}"/>
                                    <fx:Object name="{getDefaultString('markerStyleCross')}" style="{SimpleMarkerSymbol.STYLE_CROSS}"/>
                                    <fx:Object name="{getDefaultString('markerStyleDiamond')}" style="{SimpleMarkerSymbol.STYLE_DIAMOND}"/>
                                    <fx:Object name="{getDefaultString('markerStyleSquare')}" style="{SimpleMarkerSymbol.STYLE_SQUARE}"/>
                                    <fx:Object name="{getDefaultString('markerStyleTriangle')}" style="{SimpleMarkerSymbol.STYLE_TRIANGLE}"/>
                                    <fx:Object name="{getDefaultString('markerStyleX')}" style="{SimpleMarkerSymbol.STYLE_X}"/>
                                </s:ArrayList>
                            </s:DropDownList>
                        </s:HGroup>
                    </s:HGroup>
                </mx:FormItem>
                <mx:FormItem id="markerSizeAlpha"
                             width="100%"
                             includeInLayout="{drawingPoint}"
                             label="{markerSizeLabel}"
                             visible="{drawingPoint}">
                    <s:HGroup width="100%"
                              gap="21"
                              verticalAlign="middle">
                        <mx:NumericStepper id="numMarkerSize"
                                           maximum="50"
                                           minimum="0"
                                           value="15"/>
                        <s:Label text="{markerAlphaLabel}"/>
                        <mx:NumericStepper id="numMarkerAlpha"
                                           maximum="1"
                                           minimum="0"
                                           stepSize="0.1"
                                           value="1"/>
                    </s:HGroup>
                </mx:FormItem>
                <mx:FormItem id="markerOutlineColorWidth"
                             width="100%"
                             includeInLayout="{drawingPoint}"
                             label="{markerOutlineColorLabel}"
                             visible="{drawingPoint}">
                    <s:HGroup width="100%"
                              gap="55"
                              verticalAlign="middle">
                        <mx:ColorPicker id="cpMarkerOutline" selectedColor="0x00000"/>
                        <s:HGroup width="100%"
                                  gap="24"
                                  verticalAlign="middle">
                            <s:Label text="{markerOutlineWidthLabel}"/>
                            <mx:NumericStepper id="numMarkerOutlineWidth"
                                               maximum="5"
                                               minimum="0"
                                               stepSize="1"
                                               value="1"/>
                        </s:HGroup>
                    </s:HGroup>
                </mx:FormItem>
                <mx:FormItem id="fillColorStyle"
                             width="100%"
                             includeInLayout="{drawingPolygon}"
                             label="{fillColorLabel}"
                             visible="{drawingPolygon}">
                    <s:HGroup width="100%"
                              gap="55"
                              verticalAlign="middle">
                        <mx:ColorPicker id="cpFill"
                                        change="fillSymbolChangeHandler()"
                                        selectedColor="0x3FAFDC"/>
                        <s:HGroup width="100%"
                                  gap="24"
                                  verticalAlign="middle">
                            <mx:Label text="{fillStyleLabel}"/>
                            <s:DropDownList id="fillStyle"
                                            change="fillSymbolChangeHandler()"
                                            labelField="name"
                                            selectedIndex="0">
                                <s:ArrayList>
                                    <fx:Object name="{getDefaultString('fillStyleSolid')}" style="{SimpleFillSymbol.STYLE_SOLID}"/>
                                    <fx:Object name="{getDefaultString('fillStyleBackwardDiagonal')}" style="{SimpleFillSymbol.STYLE_BACKWARD_DIAGONAL}"/>
                                    <fx:Object name="{getDefaultString('fillStyleCross')}" style="{SimpleFillSymbol.STYLE_CROSS}"/>
                                    <fx:Object name="{getDefaultString('fillStyleForwardDiagonal')}" style="{SimpleFillSymbol.STYLE_FORWARD_DIAGONAL}"/>
                                    <fx:Object name="{getDefaultString('fillStyleHorizontal')}" style="{SimpleFillSymbol.STYLE_HORIZONTAL}"/>
                                    <fx:Object name="{getDefaultString('fillStyleVertical')}" style="{SimpleFillSymbol.STYLE_VERTICAL}"/>
                                </s:ArrayList>
                            </s:DropDownList>
                        </s:HGroup>
                    </s:HGroup>
                </mx:FormItem>
                <mx:FormItem id="fillAlpha"
                             width="100%"
                             includeInLayout="{drawingPolygon}"
                             label="{fillAlphaLabel}"
                             visible="{drawingPolygon}">
                    <mx:NumericStepper id="numFillAlpha"
                                       change="fillSymbolChangeHandler()"
                                       maximum="1"
                                       minimum="0"
                                       stepSize="0.1"
                                       value="0.5"/>
                </mx:FormItem>
                <mx:FormItem id="fillOutlineColorWidth"
                             width="100%"
                             includeInLayout="{drawingPolygon}"
                             label="{fillOutlineColorLabel}"
                             visible="{drawingPolygon}">
                    <s:HGroup width="100%"
                              gap="55"
                              verticalAlign="middle">
                        <mx:ColorPicker id="cpFillOutline"
                                        change="fillSymbolChangeHandler()"
                                        selectedColor="0x000000"/>
                        <s:HGroup width="100%"
                                  gap="24"
                                  verticalAlign="middle">
                            <s:Label text="{fillOutlineWidthLabel}"/>
                            <mx:NumericStepper id="numFillOutlineWidth"
                                               change="fillSymbolChangeHandler()"
                                               maximum="5"
                                               minimum="0"
                                               stepSize="1"
                                               value="1"/>
                        </s:HGroup>
                    </s:HGroup>
                </mx:FormItem>
                <mx:FormItem id="lineColorStyle"
                             width="100%"
                             includeInLayout="{drawingLine}"
                             label="{lineColorLabel}"
                             visible="{drawingLine}">
                    <s:HGroup width="100%"
                              gap="55"
                              verticalAlign="middle">
                        <mx:ColorPicker id="cpLine"
                                        change="lineSymbolChangeHandler()"
                                        selectedColor="0x3FAFDC"/>
                        <s:HGroup width="100%"
                                  gap="24"
                                  verticalAlign="middle">
                            <s:Label text="{lineStyleLabel}"/>
                            <s:DropDownList id="lineStyle"
                                            change="lineSymbolChangeHandler()"
                                            labelField="name"
                                            selectedIndex="0">
                                <s:ArrayList>
                                    <fx:Object name="{getDefaultString('lineStyleSolid')}" style="{SimpleLineSymbol.STYLE_SOLID}"/>
                                    <fx:Object name="{getDefaultString('lineStyleDash')}" style="{SimpleLineSymbol.STYLE_DASH}"/>
                                    <fx:Object name="{getDefaultString('lineStyleDot')}" style="{SimpleLineSymbol.STYLE_DOT}"/>
                                    <fx:Object name="{getDefaultString('lineStyleDashDot')}" style="{SimpleLineSymbol.STYLE_DASHDOT}"/>
                                    <fx:Object name="{getDefaultString('lineStyleDashDotDot')}" style="{SimpleLineSymbol.STYLE_DASHDOTDOT}"/>
                                </s:ArrayList>
                            </s:DropDownList>
                        </s:HGroup>
                    </s:HGroup>
                </mx:FormItem>
                <mx:FormItem id="lineWidthAlpha"
                             width="100%"
                             includeInLayout="{drawingLine}"
                             label="{lineWidthLabel}"
                             visible="{drawingLine}">
                    <s:HGroup width="100%"
                              gap="18"
                              verticalAlign="middle">
                        <mx:NumericStepper id="numLineWidth"
                                           change="lineSymbolChangeHandler()"
                                           maximum="50"
                                           minimum="0"
                                           stepSize="1"
                                           value="5"/>
                        <mx:Label text="{lineAlphaLabel}"/>
                        <mx:NumericStepper id="numLineAlpha"
                                           change="lineSymbolChangeHandler()"
                                           maximum="1"
                                           minimum="0"
                                           stepSize="0.1"
                                           value="1"/>
                    </s:HGroup>
                </mx:FormItem>
            </mx:Form>
            <s:VGroup id="measurements"
                      width="100%" height="100%"
                      gap="0"
                      includeInLayout="{showMeasurements}"
                      paddingTop="2"
                      visible="{showMeasurements}">
                <mx:CheckBox id="chkMeasurements" label="{showmeasurementsLabel}"/>
                <mx:Form id="frmMeasurements"
                         width="100%" height="100%"
                         includeInLayout="{chkMeasurements.selected}"
                         paddingBottom="0"
                         verticalScrollPolicy="off"
                         visible="{chkMeasurements.selected}">
                    <mx:FormItem width="100%"
                                 includeInLayout="{chkMeasurements.selected &amp;&amp; drawingPolygon}"
                                 label="{areaUnitsLabel}"
                                 visible="{chkMeasurements.selected &amp;&amp; drawingPolygon}">
                        <s:DropDownList id="cboArea"
                                        requireSelection="true"
                                        selectedIndex="0"/>
                    </mx:FormItem>
                    <mx:FormItem width="100%"
                                 includeInLayout="{chkMeasurements.selected}"
                                 label="{distanceUnitsLabel}"
                                 visible="{chkMeasurements.selected}">
                        <s:DropDownList id="cboDistance"
                                        requireSelection="true"
                                        selectedIndex="0"/>
                    </mx:FormItem>
                </mx:Form>
            </s:VGroup>
        </s:VGroup>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>
