<?xml version="1.0" encoding="utf-8"?>
<!--
	////////////////////////////////////////////////////////////////////////////////
	// Developed by Abraham, Didum:didum.abraham@iowa.gov 
	// Version 2.2 - May 01, 2011
	////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:esri="http://www.esri.com/2008/ags"
	xmlns:viewer="com.esri.viewer.*"
	xmlns:ImageryIdnt="widgets.DotContainer.ImageryIdnt.*"
	layout="absolute" 
	widgetConfigLoaded="init();" currentState="beginState">
	<!--creationComplete="init()" widgetConfigLoaded="init()" - not needed if (.xml file) not included-->
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.IdentifyEvent;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.tasks.supportClasses.IdentifyParameters;
			import com.esri.ags.tasks.supportClasses.IdentifyResult;
			import com.esri.ags.tools.DrawTool;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.events.ListEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
							
			//myLabels vars in file.xml
			private var identifyLabel:String;
			private var resultsLabel:String;
			[Bindable]private var descriptLabel:String;
			[Bindable]private var descriptLabel2:String;
			[Bindable]private var mypointLabel:String;
			[Bindable]private var myclearLabel:String;
			
			//my vars in file.mxml
			[Bindable]private var lastIdentifyResultGraphic:Graphic;		
			private var myDrawTool:DrawTool;
			private var idntfymPt:MapPoint;
			private var keepActive:Boolean;
			private var idntfyLyrOptn:String;
			private var idntfyTolerance:Number = 3;
			private const myIconURL:String = "assets/images/";
			
			//getTxt was "Ctrl/Shift for multiple selection" iff(allowMultipleSelection=true) for myListCols
			[Bindable]private var getTxt:String = "";
			[Bindable]private var myFeatures:ArrayCollection;
			[Bindable]private var getTitle:String = "Available Imagery : 0";
			[Bindable]private var myListColsLabels:Array = [{label:"Count"}, 
				{label:"Rest Services"}, {label:"View Path"}, {label:"Service Name"}, {label:"Add"}];
			
			private function activateGraphic():void {
				map.addLayer(myGraphicsLayer);
			}
			
			private function init():void {
				activateGraphic();
				myDrawTool = new DrawTool();
				myDrawTool.map = map;
				myDrawTool.addEventListener(DrawEvent.DRAW_END, onDrawEnd);
				
				if(configXML){
					identifyLabel = configXML.labels.identifylabel || "Identify/Clear";
					resultsLabel = configXML.labels.resultslabel || "Results";
					descriptLabel = configXML.labels.descriptlabel || "Use the identify tool to identify features on the map";
					descriptLabel2 = configXML.labels.descriptlabel2 || "Click dumpster to clear map graphicslayer:";
					mypointLabel = configXML.labels.mypointlabel || "Map Point Identify";
					myclearLabel = configXML.labels.myclearlabel || "Clear";
					keepActive = toBoolean(configXML.keepidentifyactive.toString());
					idntfyLyrOptn = configXML.idntfylyroptn || IdentifyParameters.LAYER_OPTION_VISIBLE;
					if(Number(configXML.idntfytolerance) > 0 )
						idntfyTolerance = Number(configXML.idntfytolerance);
				}
				wTemplate.addTitlebarButton(myIconURL + "i_info.png", identifyLabel, showBeginState);
				wTemplate.addTitlebarButton(myIconURL + "i_table.png", resultsLabel, showResultState);
				wTemplate.addTitlebarButton(myIconURL + "i_clear.png", resultsLabel, showClearGraphic);
				activateClick();
			}
			
			private function toBoolean(val:String):Boolean {
				if (val == "true") { return true; } else { return false; }
			}
			
			private function activateClick():void { //event:MapMouseEvent
				var status:String = mypointLabel;
				if(!myDrawTool)
					myDrawTool = new DrawTool();
				myDrawTool.showDrawTips = false;
				myDrawTool.markerSymbol = clickPtSym;
				myDrawTool.activate(DrawTool.MAPPOINT);
			}
			
			private function onDrawEnd(event:DrawEvent):void {
				clearMap(); 
				myGraphicsLayer.add(event.graphic);
				idntfymPt = event.graphic.geometry as MapPoint;
				doIdentify();
				//myDrawTool.deactivate();	//1, all added
				if(keepActive)
					activateClick(); 
			}
					
			private function doIdentify():void 
			{
				map.alpha = 0.50;
				var identifyParams:IdentifyParameters = new IdentifyParameters();
				identifyParams.tolerance = idntfyTolerance; 
				identifyParams.returnGeometry = true;
				identifyParams.geometry = idntfymPt; 
				identifyParams.mapExtent = map.extent;
				identifyParams.width = map.width;
				identifyParams.height = map.height;
				identifyParams.layerIds = [0];
				identifyParams.spatialReference = map.spatialReference;
				
				identifyTask.execute(identifyParams, new AsyncResponder(myResultFnctn, myFaultFnctn, null));
				/*null was clickGraphic
				identifyTask.addEventListener(IdentifyEvent.EXECUTE_COMPLETE, myResultFnctn);
				identifyTask.addEventListener(FaultEvent.FAULT, myFaultFnctn);
				identifyTask.execute(identifyParams);*/
				showResultState();		//switch tab to show result state
			}
			
			private function myResultFnctn(results:Array, token:Object=null):void {
				if(results && results.length > 0) {
					var result:IdentifyResult = results[0];
					var resultGraphic:Graphic = result.feature;
					
					var myMapPoint:MapPoint = idntfymPt; 
					var myPoint:Point = map.toScreen(myMapPoint);
					var myLabel:String, infoWinText:String;
					
					switch(resultGraphic.geometry.type) 
					{
						case Geometry.POLYGON: 
						{
							//This allows the population of datagrid
							myFeatures = new ArrayCollection();
							for(var k:int = 0; k < results.length; k++) 
							{
								//var cntr2: Number = (k+1);
								myFeatures.addItem(
									{
										COUNT: (k+1),
										Service: results[k].feature.attributes.Service,
										ImageryPat: results[k].feature.attributes.ImageryPat,
										ServiceNam: results[k].feature.attributes.ServiceNam,
										ViewImage: " ",
										View: " "
									}
								);
								myGrid.visible = true;
								getTitle = "Available Imagery : " + results.length; 
							}
						}
						lastIdentifyResultGraphic = resultGraphic;
						myGraphicsLayer.graphicProvider = lastIdentifyResultGraphic;
					}
					//myGraphicsLayer.graphicProvider = lastIdentifyResultGraphic;
				}
			}
			
			private function myFaultFnctn(errInfo:Object, clickGraphic:Graphic = null):void {
				Alert.show(String(errInfo), "Identify Error"); 
			}
			
			private function onItemClick(event:ListEvent):void {
				var myListColsCntr:int = myListCols.selectedItems.length; //changes with change in event
				var getName:Object = myListCols.selectedItem;
				var getString:String = getName.label;
				
				var getSvc:String = myGrid.selectedItem.Service;
				var getImg:String = myGrid.selectedItem.ImageryPat;
				switch(event.columnIndex){
					case 0: {
						if(event.columnIndex === 0 && myListColsCntr === 4 && getString === "Rest Services"){
							navigateToURL(new URLRequest(getSvc), '_blank');						
						} else if (event.columnIndex === 0 && myListColsCntr === 1 && getString === "Rest Services"){ 
							navigateToURL(new URLRequest(getSvc), '_blank');
						}else if(event.columnIndex === 0 && myListColsCntr === 1 && getString === "View Path"){
							navigateToURL(new URLRequest(getImg), '_blank');
						} else if (event.columnIndex === 0 && myListColsCntr === 1 && getString  === "Add"){
							myImageTile.url = event.itemRenderer.data.Service;						
							myGraphicsLayer.clear();
							
							map.addLayer(myImageTile, 0); 
							map.reorderLayer(myImageTile.url, 0); 
						} else {
							"";	
						}
						break;
					}
					case 1: {
						if(event.columnIndex === 1 && myListColsCntr === 4 && getString === "Rest Services"){
							navigateToURL(new URLRequest(getImg), '_blank');
						} else if (event.columnIndex === 1 && myListColsCntr === 5 && getString === "Count"){
							navigateToURL(new URLRequest(getSvc), '_blank');
						} else {	
							"";
						}
						break;
					}
					case 2: {
						if(event.columnIndex === 2 && myListColsCntr === 4 && getString === "Rest Services"){
							"";
						} else if(event.columnIndex === 2 && myListColsCntr === 5 && getString === "Count"){
							navigateToURL(new URLRequest(getImg), '_blank');
						} else {
							"";
						}
						break;
					}
					case 3: {
						if(event.columnIndex === 3 && myListColsCntr === 4 && getString === "Rest Services"){
							myImageTile.url = event.itemRenderer.data.Service;						
							myGraphicsLayer.clear();
							
							map.addLayer(myImageTile, 0); 
							map.reorderLayer(myImageTile.url, 0); 
						} else {
							"";
						}
						break;
					}
					case 4: {
						if(event.columnIndex === 4 && myListColsCntr === 5 && getString === "Count"){
							myImageTile.url = event.itemRenderer.data.Service;						
							myGraphicsLayer.clear();
							
							map.addLayer(myImageTile, 0); //-1=place img on top
							map.reorderLayer(myImageTile.url, 0); //1=places img on top, 0=places img underneath
							break;
						} else {
							"";
							break;
						}		
					}
					default : {
						myGraphicsLayer.clear();
						break;
					}
				}
			}
			
			private function hideShowMyGridCols():void {
				var myAdvGridCol:Array = myGrid.columns;
				var myMxListCols:Array =  myListCols.selectedItems; 
				var myAdvDGClassCol:AdvancedDataGridColumn;
				var myGridHeaderTxtLbl:String; 
				var myListColsLbls:String;
				var colsVisible:Boolean
				for (var i:int=0;i<myAdvGridCol.length;i++)  {
					colsVisible = false
					myAdvDGClassCol = myAdvGridCol[i];
					myGridHeaderTxtLbl = myAdvDGClassCol.headerText; 
					for (var j : int = 0; j < myMxListCols.length; j++)  {
						if(myMxListCols[j] == null) continue;
						myListColsLbls = myMxListCols[j].label;
						if (myListColsLbls === myGridHeaderTxtLbl)  {
							colsVisible = true;
							break;
						}			  
					}       
					if (colsVisible) {
						myAdvDGClassCol.visible = true;
					} else  {
						myAdvDGClassCol.visible = false;
					}
				}
			}
			
			private function showAll():void {
				myListCols.selectedIndices = [0,1,2,3,4];
				hideShowMyGridCols();
			}
			
			private function hideAll():void {
				myListCols.selectedIndices = [];
				hideShowMyGridCols();
			}
			
			private function setDefault():void {
				myListCols.selectedIndices = [1,2,3,4];
				hideShowMyGridCols();
			}
			
			public var cntr:int=0;
			private function handleDivderRelease():void {
				if(cntr == 0) {
					myControlBox.width = 0;
				} else if(cntr == 1) {
					myControlBox.width = 120;
				}
				cntr = (cntr + 1) % 2;
			}
			
			private function myLyrDelete():void {
				map.removeLayer(myImageTile);
			}
			
			private function clearMap():void {
				idntfymPt = null;
				myGrid.dataProvider = null;
				myGraphicsLayer.clear();
				map.alpha = 1.0;
				bPanel.title = "Feature : 0";
				myDrawTool.deactivate(); 	// added 6-14-2011
			}
			
			private function showBeginState():void {
				this.currentState = "beginState";
				wTemplate.width = 340; wTemplate.height = 200;
			}
			
			private function showResultState():void {
				this.currentState = "resultState";
				wTemplate.selectedTitlebarButtonIndex = 1;
				wTemplate.width = 500; wTemplate.height = 325;
			}
			
			private function showClearGraphic():void {
				this.currentState = "clearGraphic";
				wTemplate.width = 340; wTemplate.height = 200;
			}
				
			private function initiateMap():void {
				map.openHandCursorVisible = false;
				activateClick();
				if(myGraphicsLayer)
					myGraphicsLayer.visible = true;
			}
			
			protected function wOpenHandler(event:Event):void {
				initiateMap(); //activates the widget tray
				wTemplate.width = 340; wTemplate.height = 200;
			}

			protected function wMinimizedHandler(event:Event):void
			{
				idntfymPt = null;
				myDrawTool.deactivate();	//needed to keep widget at miminized state
				showBeginState();			//show initiate state with drawtools in widget
				resultState.visible = false;
				//myGraphicsLayer.clear();
				if(myGraphicsLayer)
					myGraphicsLayer.visible = true; //false;
			}
			
			protected function wClosedHandler(event:Event):void
			{
				map.alpha = 1.0;
				map.removeLayer(myImageTile);
				map.openHandCursorVisible = true;
				myDrawTool.deactivate();
				resultState.visible = false;
				myGraphicsLayer.clear();
				if(myGraphicsLayer) //check to see if graphicslayer is active
					myGraphicsLayer.visible = false;
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Symbol for where the user clicked -->
		<esri:SimpleLineSymbol id="ptOutline" style="solid" color="0xFFFFFF" width="1" alpha="0.8"/>
		<esri:SimpleMarkerSymbol id="clickPtSym" outline="{ptOutline}" color="0xFF0000" size="12" style="circle"/>
		
		<!-- Identify Task -->
		<esri:IdentifyTask id="identifyTask" concurrency="last" disableClientCaching="true" 
			url="http://geonexus/ArcGIS/rest/services/AerialImagery/GeoNexusAerialImageryDB/MapServer"/>
	
		<!--GraphicsLayers and ImageService-->
		<esri:ArcGISImageServiceLayer id="myImageTile" alpha="1.0" visible="true"/>
		<esri:GraphicsLayer id="myGraphicsLayer"/>
	</fx:Declarations>
	
	<viewer:states>
		<s:State name="beginState" />
		<s:State name="resultState" />
		<s:State name="clearGraphic" />
	</viewer:states>
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<s:Fade targets="{[beginState, resultState, clearGraphic]}"/>
		</s:Transition>
	</viewer:transitions>
	

	<viewer:WidgetTemplate id="wTemplate" width="340" height="200" open="wOpenHandler(event)"
		closed="wClosedHandler(event)" minimized="wMinimizedHandler(event)">
		
		<s:Group id="beginState" width="100%" height="100%" visible="false" visible.beginState="true">
			<s:layout>
				<s:VerticalLayout gap="5" horizontalAlign="center"/>
			</s:layout>
			<mx:Text id="myTxtLabel" text="{descriptLabel}" width="100%" textAlign="center" />
			<mx:HBox horizontalAlign="center" width="100%" horizontalGap="15">
				<mx:Image click="{activateClick()}" source="{myIconURL + 'i_draw_point.png'}" 
					useHandCursor="true" buttonMode="true" toolTip="{mypointLabel}" width="40" height="40" />
				<!--<mx:Image click="clearMap()" source="assets/images/i_clear.png" useHandCursor="true"
					buttonMode="true" toolTip="{myclearLabel}" width="40" height="40" />-->
			</mx:HBox>
		</s:Group>	
		
		<s:Group id="resultState" width="100%" height="100%" visible.resultState="true" visible="false">
			<mx:Panel id="bPanel" title="{getTitle}" color="0x999999" width="100%" height="100%"
				 visible="true">
				
				<mx:HDividedBox height="100%" width="100%" dividerRelease="handleDivderRelease();">
						<mx:VBox id="myControlBox" width="95" height="100%" verticalGap="1" horizontalScrollPolicy="auto" left="2">
							<mx:Label text="Selected Cols" fontWeight="bold" color="#000000"/>
							<mx:List id="myListCols" width="95" height="100%" dataProvider="{myListColsLabels}"
								labelField="label" borderColor="#000000"
								allowMultipleSelection="false" click="hideShowMyGridCols();"
								selectedIndices="[1,2,3,4]"/>
							<mx:TextArea wordWrap="true" selectable="false" editable="false" borderStyle="none"
								text="{getTxt}" width="95" height="10"/>
							<mx:Spacer height="5"/>
							<mx:Button label="Show all" width="95" click="showAll();"/>
							<mx:Button label="Default"  width="95" click="setDefault();"/>
							<mx:Button label="Hide all" width="95" click="hideAll();"/>
							<mx:Button label="Hide Image" width="95" click="myLyrDelete();"/>
						</mx:VBox>
				
					<mx:HBox width="100%" height="100%">
						<mx:AdvancedDataGrid id="myGrid" visible="false" color="0x006699" width="100%" height="100%"
							itemClick="onItemClick(event)" editable="false" horizontalScrollPolicy="on"
					 		verticalScrollPolicy="auto" selectedIndex="0" selectable="true" dataProvider="{myFeatures}">			
							<mx:columns>
								<mx:AdvancedDataGridColumn width="18" dataField="COUNT" headerText="Count" visible="false"/>
								<mx:AdvancedDataGridColumn  dataField="Service" headerText="Rest Services" visible="true"/>
								<mx:AdvancedDataGridColumn  dataField="ImageryPat" headerText="View Path" visible="true"/>
								<mx:AdvancedDataGridColumn  dataField="ServiceNam" headerText="Service Name" visible="true"/>
								<mx:AdvancedDataGridColumn width="18" dataField="ViewImage" headerText="Add" visible="true">
									<mx:itemRenderer>
										<fx:Component>
											<mx:RadioButton fontWeight="bold" label=" " labelPlacement="right" paddingLeft="5"
												selected="{(data.ViewImage === 'false')?true:false}"
												click="{data.ViewImage = (data.ViewImage !== 'false')?'true':'false';}" />
										</fx:Component>
									</mx:itemRenderer>
								</mx:AdvancedDataGridColumn>
						
							</mx:columns>
						</mx:AdvancedDataGrid>
					</mx:HBox>
				</mx:HDividedBox>	
				<!--for RadioButton http://blog.flexexamples.com/2008/01/27/using-a-checkbox-control-as-a-list-item-renderer-in-flex/-->
			</mx:Panel>
		</s:Group>
		
		<s:Group id="clearGraphic" visible="false" visible.clearGraphic="true" width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout gap="6" horizontalAlign="center"/>
			</s:layout>
			<mx:Text id="myTxtLabel2" text="{descriptLabel2}" width="100%" textAlign="center"
				fontWeight="normal"/>
			<mx:HBox horizontalAlign="center" width="100%" ><!--assets/images/i_clear.png-->
				<mx:Image click="clearMap();" source="{myIconURL + 'i_clear.png'}" useHandCursor="true"
					buttonMode="true" toolTip="{myclearLabel}" width="40" height="40"/>
			</mx:HBox>	
		</s:Group>
		
	</viewer:WidgetTemplate>	
</viewer:BaseWidget>