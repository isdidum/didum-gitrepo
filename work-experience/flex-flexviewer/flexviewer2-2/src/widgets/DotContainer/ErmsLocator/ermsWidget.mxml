<?xml version="1.0" encoding="utf-8"?>
<!--
	////////////////////////////////////////////////////////////////////////////////
	// Developed by Abraham, Didum:didum.abraham@iowa.gov
	// Version 2.2 - May 04, 2011
	////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:esri="http://www.esri.com/2008/ags"
	xmlns:viewer="com.esri.viewer.*"
	xmlns:widgets="widgets.DotContainer.ErmsLocator.*"
	layout="absolute" widgetConfigLoaded="init()">
	
	<!--creationComplete="init()" iff no .xml file-->
	
	<fx:Style>
		@namespace mx "library://ns.adobe.com/flex/mx";  
		mx|ToolTip
		{
			font-size: 14;
		}
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.supportClasses.BufferParameters;
			import com.esri.ags.tools.NavigationTool;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextArea;
			import mx.events.ItemClickEvent;
			
			import spark.primitives.Line;
			
			
			private var bufferParams:BufferParameters;
			private var themain:String;
			private var thePoint:String;
			private var thePolyline:String;
			private var thePolygon:String;
			private var theExtent:String;
			private var myGeometry:Geometry;
			[Bindable]private var myclearLabel:String;
			[Bindable]private var descriptLabel:String;
			[Bindable]private var descriptLabel2:String;
			private const myIconURL:String = "assets/images/";		
			
			private function activateGraphic():void {
				map.addLayer(myGraphicsLayer);
			}
			
			private function init():void {
				if(configXML) {
					themain = configXML.labels.emain || "Geometry DrawTool";
					descriptLabel = configXML.labels.edescriptlabel || "Click dumpster to clear map graphicslayer:";						
					descriptLabel2 = configXML.labels.edescript2label || "Use the geometry draw tools to identify features on the map:";
					thePoint = configXML.labels.epoint || "Point";
					thePolyline	= configXML.labels.epolyline || "Polyline";
					thePolygon = configXML.labels.epolygon || "Polygon";
					theExtent = configXML.labels.eextent || "Extent";
					myclearLabel = configXML.labels.eclearlabel || "Clear";
				}
				myWgtBox.addTitlebarButton(myIconURL + "i_draw.png", themain, showBeginState);
				myWgtBox.addTitlebarButton(myIconURL + "i_clear.png", myclearLabel, showClearGraphic);
				showBeginState();
			}
			
			
			private function bufferGeometry():void {
				activateGraphic();
				
				bufferParams = new BufferParameters();
				var valGeom:Geometry = Geometry(map.extent);
				bufferParams.geometries = [valGeom];
				bufferParams.distances = [myBufferTxt.text];
				bufferParams.unit = GeometryService.UNIT_METER;
				bufferParams.bufferSpatialReference = new SpatialReference(4326);
				myGeomSvc.addEventListener(GeometryServiceEvent.BUFFER_COMPLETE, BCHandler);
				myGeomSvc.buffer(bufferParams);
				
				function BCHandler(event:GeometryServiceEvent):void {
					myGeomSvc.removeEventListener(GeometryServiceEvent.BUFFER_COMPLETE, BCHandler);
				}
			}
			
			protected function myItemClickHandler(event:ItemClickEvent):void {
				if(myTab.selectedIndex < 0) {
					//when toggling a tool off, deactive it
					myDrawTool.deactivate();
				} else {
					switch(event.item.label) {
						case "MAPPOINT": {
							myTab.toolTip = thePoint; 
							myDrawTool.activate(DrawTool.MAPPOINT);
							bufferGeometry();
							break;
						} 
						case "POLYLINE": {
							myTab.toolTip = thePolyline; 
							myDrawTool.activate(DrawTool.POLYLINE);
							bufferGeometry();
							break;
						} 
						case "POLYGON": {
							myTab.toolTip = thePolygon; 
							myDrawTool.activate(DrawTool.POLYGON);
							bufferGeometry();
							break;
						} 
						case "EXTENT": {
							myTab.toolTip = theExtent; 
							myDrawTool.activate(DrawTool.EXTENT);
							bufferGeometry();
							break;
						}						
					}
				}
			}
			
			protected function myDrawEndHandler(event:DrawEvent):void {
				//resets after finished drawing a feature
				myDrawTool.deactivate();
				myTab.selectedIndex = -1; //deselectes all buttons in the bar
				myTab.toolTip = null; //deselects toolTips
				myGeometry = event.graphic.geometry as Geometry;
				projectNowHandler();
			}
			
			private function projectNowHandler():void {
				var myOutSR:SpatialReference = new SpatialReference(4326);
				if(myGeometry) {
					myGeomSvc.project([myGeometry], myOutSR);
				}
			}
			
			protected function myProjectNow(event:GeometryServiceEvent):void {
				var setType:String, myGeoType:String; var nodes:Array = new Array();
				var xArray:Array = new Array(), yArray:Array = new Array();
				
				var myPoint:MapPoint = (event.result as Array)[0] as MapPoint;
				var myLine:Polyline = (event.result as Array)[0] as Polyline;
				var myPolygon:Polygon = (event.result as Array)[0] as Polygon;
				var myExt:Extent = (event.result as Array)[0] as Extent;
				
				if(myPoint) {
					setType = myPoint.type; myGeoType = "POINT";
					nodes = [[myPoint.x.toFixed(4), myPoint.y.toFixed(4)]];
					//stores points in array
					for each (var k:int in nodes) {
						xArray.push(nodes[k][0]);	 //works for a point
						yArray.push(nodes[k][1]);
					}
					
				} else if (myLine) {
					setType = myLine.type; myGeoType = "LINE";
					for each(var i:int in myLine.paths){
						for each(var j:MapPoint in myLine.paths[i]){
							//Alert.show(myLine.paths[i][j]);
							xArray.push(j.x.toFixed(4));
							yArray.push(j.y.toFixed(4));
						}
					}
					
				}else if(myPolygon){
					setType = myPolygon.type; myGeoType = "POLYGON";				
					//for (var si:int=0; si<myPgon.rings.length; si++){//works as well
					for each(var si:int in myPolygon.rings){ //works
						for each(var sj:MapPoint in myPolygon.rings[si]){
							xArray.push(sj.x.toFixed(4));
							yArray.push(sj.y.toFixed(4));
						}
					}
					
				}else if(myExt) {
					setType = myExt.type; myGeoType = "RECTANGLE";
					nodes = [[myExt.xmin.toFixed(5), myExt.ymin.toFixed(5)], 
						[myExt.xmax.toFixed(5), myExt.ymax.toFixed(5)]];
					
					xArray = [nodes[0][0], nodes[1][0]];
					yArray = [nodes[0][1], nodes[1][1]];
				}
				
				var mURL:String = "http://ntliermsportal/CMEGISWeb/GISDoc.aspx?geom=" 
					+ myGeoType + "&long=" + xArray.join("|") + "&lat=" + yArray.join("|") 
					+ "&buffer=" + myBufferTxt.text + "&mask=" + spatialRel.selectedItem;
				
				//Writes out output to textArea for debugging
				/*
				myTxt.visible = false; // (suppressed, was true)
				myTxt.htmlText = "1). Relation = " + spatialRel.selectedItem 
				+ "<br />2). Buffer = " + myBufferTxt.text
				+ "<br />3). GeoType = " + myGeoType
				+ "<br />4). SetType = " + setType
				+ "<br />5). Nodes = " + nodes 
				+ "<br />6). xArray = " + xArray
				+ "<br />7). yArray = " + yArray
				+ "<br />8). xArJon = " + xArray.join("|")
				+ "<br />9). yArJon = " + yArray.join("|") 
				+ "<br />" 
				+ "<br />10). URL = " + mURL;
				*/
				
				/*
				navigateToURL(new URLRequest(mURL), '_blank'); //works as well
				ExternalInterface.call('window.open', mURL, 'emrsWidget', 'width=1000,height=600',
					trace('Initiating Window.Open')); //but this give more flexibility in terms of its attributes
				*/
				ExternalInterface.call('window.open', mURL, 'emrsWidget', 'width=1000,height=600',
					null); 
			}
			
			private function onFault(errInfo:Object, token:Object = null):void {
				Alert.show(errInfo.toString(), "Fault Error");
			}
			
			private function clearMap():void {
				myGraphicsLayer.clear();
				myDrawTool.deactivate();
				myTab.toolTip = null;
			}
			
			protected function myWgtBoxOpen(event:Event):void {
				map.openHandCursorVisible = false;
				if(myGraphicsLayer)
					myGraphicsLayer.visible = true;
			}

			protected function myWgtBoxMinimized(event:Event):void {
				myGraphicsLayer.clear();
				myDrawTool.deactivate();
				showBeginState();			//show initiate state with drawtools in widget
				clearGraphic.visible = false;
				if(myGraphicsLayer)
					myGraphicsLayer.visible = false;
			}

			protected function myWgtBoxClosed(event:Event):void {
				myGraphicsLayer.clear();
				myDrawTool.deactivate();
				clearGraphic.visible = false;
				if(myGraphicsLayer)
					myGraphicsLayer.visible = false;
			}
			
			private function showBeginState():void {
				this.currentState = "beginState";
			}
			
			private function showClearGraphic():void {
				this.currentState = "clearGraphic";
				myWgtBox.selectedTitlebarButtonIndex = 0;//1;
			}

		]]>
	</fx:Script>

	
	<viewer:states>
		<s:State name="beginState"/>
		<s:State name="clearGraphic"/>
	</viewer:states>
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<s:Fade targets="{[beginState,clearGraphic]}"/>
		</s:Transition>
	</viewer:transitions>
	
	
	<fx:Declarations>
		<!--Geometric Service-->
		<esri:GeometryService id="myGeomSvc" concurrency="last" 
			projectComplete="myProjectNow(event)" fault="onFault(event)" showBusyCursor="true"
			url="http://geonexus/ArcGIS/rest/services/Geometry/GeometryServer"/>
		
		<!--Symbol for point shapes-->
		<esri:SimpleMarkerSymbol id="sms" color="0x00FF00" size="12" style="circle"/>
		
		<!-- Symbol for all line shapes -->
		<esri:SimpleLineSymbol id="sls" width="3" color="0x00FF00"/>
		
		<!-- Symbol for all polygon shapes -->
		<esri:SimpleFillSymbol id="sfs" color="0x5B5BFF" style="solid">
			<esri:outline>
				<esri:SimpleLineSymbol width="1" color="0x00FF00" style="dashdot"/>
			</esri:outline>
		</esri:SimpleFillSymbol>
		
		<!--myDrawTool-->
		<esri:DrawTool id="myDrawTool" drawEnd="myDrawEndHandler(event)" fillSymbol="{sfs}" 
			graphicsLayer="{myGraphicsLayer}" lineSymbol="{sls}" map="{map}" markerSymbol="{sms}"/>
		
		<!--GraphicsLayer-->
		<esri:GraphicsLayer id="myGraphicsLayer" />
	</fx:Declarations>
	
	<viewer:WidgetTemplate id="myWgtBox" width="340" height="210" open="myWgtBoxOpen(event)"
		minimized="myWgtBoxMinimized(event)" closed="myWgtBoxClosed(event)">
		
		<!--Buffer Input-->
		<s:Group id="beginState" visible="false" visible.beginState="true" width="100%" height="100%">
			<s:BorderContainer width="100%" height="35" borderVisible="true" backgroundColor="0x99CCFF"
				top="0" color="0x000000" alpha="0.90">
				<s:Label text="Buffer [m]" left="10" top="13" bottom="5"/>
				<s:TextInput id="myBufferTxt" maxWidth="450" text="1000" color="0x000000" 
					left="80" top="5" bottom="5" toolTip="Enter buffer value here"/>
			</s:BorderContainer>
			
			<!--Relation Options -->
			<s:BorderContainer width="100%" height="35" borderVisible="true" backgroundColor="0x99CCFF"
				top="37" color="0x000000" alpha="0.90" textAlign="justify">
				<mx:ControlBar>
					<s:Label text="Interaction" direction="ltr"/>
					<s:DropDownList id="spatialRel" selectedIndex="0" width="160"
						toolTip="Select type">
						<s:dataProvider>
							<s:ArrayList>
								<fx:String>ANYINTERACT</fx:String>
								<fx:String>CONTAINS</fx:String>
								<fx:String>ON</fx:String>
								<fx:String>INSIDE</fx:String>
								<fx:String>COVERS</fx:String>
								<fx:String>EQUAL</fx:String>
								<fx:String>OVERLAPBDYDISJOINT</fx:String>
								<fx:String>OVERLAPBDYINTERSET</fx:String>
								<fx:String>COVEREDBY</fx:String>
								<fx:String>TOUCH</fx:String> <!--just added-->
							</s:ArrayList>
						</s:dataProvider>
					</s:DropDownList>
					<!--<s:Label text="Relation Operator" direction="ltr"/>-->
				</mx:ControlBar>
			</s:BorderContainer>
			
			<!--myText
			<mx:TextArea id="myTxt" width="22%" height="200" top="125" editable="false" visible="false"/>
			-->
			
			<s:BorderContainer width="100%" borderVisible="true" backgroundColor="0x99CCFF"
				top="77" color="0x006699" alpha="0.90">
				<s:Label text="{descriptLabel2}" width="100%" textJustify="distribute" top="3"/>
				<mx:ToggleButtonBar id="myTab" itemClick="myItemClickHandler(event)" height="40"
					labelField="null" selectedIndex="-1" toggleOnClick="true" top="30" left="10">
					<fx:Object icon="@Embed(source='assets/i_draw_point.png')" label="MAPPOINT"/>
					<fx:Object icon="@Embed(source='assets/i_draw_line.png')" label="POLYLINE"/>
					<fx:Object icon="@Embed(source='assets/i_draw_poly.png')" label="POLYGON"/>
					<fx:Object icon="@Embed(source='assets/i_draw_rect.png')" label="EXTENT"/>				
				</mx:ToggleButtonBar>
			</s:BorderContainer>
		</s:Group>
		
		<s:Group id="clearGraphic" visible="false" visible.clearGraphic="true" width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout gap="6" horizontalAlign="center"/>
			</s:layout>
			<mx:Text id="myTxtLabel" text="{descriptLabel}" width="100%" textAlign="center"
				fontWeight="normal"/>
			<mx:HBox horizontalAlign="center" width="100%" ><!--assets/images/i_clear.png-->
				<mx:Image click="clearMap()" source="{myIconURL + 'i_clear.png'}" useHandCursor="true"
					buttonMode="true" toolTip="{myclearLabel}" width="40" height="40"/>
			</mx:HBox>	
		</s:Group>
		
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
