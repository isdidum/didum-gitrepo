<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010 ESRI
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:viewer="com.esri.viewer.*"
                   xmlns:Navigation="widgets.Navigation.*"
                   initialize="basewidget_initializeHandler(event)"
                   widgetConfigLoaded="init()">
    <viewer:states>
        <s:State name="out"/>
        <s:State name="over"/>
    </viewer:states>
    <fx:Declarations>
        <s:Fade id="fadeOver"
                alphaTo="1"
                effectEnd="navtool.alpha = 1"/>
        <s:Fade id="fadeOut"
                alphaTo="{getStyle('contentBackgroundAlpha') / 2}"
                effectEnd="navtool.alpha = getStyle('contentBackgroundAlpha') / 2"/>
    </fx:Declarations>
    <fx:Script>
        <![CDATA[
            import com.esri.viewer.AppEvent;
            import com.esri.viewer.ViewerContainer;

            import mx.events.FlexEvent;

            private var lastSelectedIndex:int; // selectedIndex for buttonbar containing pan, zoom-in and zoom-out

            protected function basewidget_initializeHandler(event:FlexEvent):void
            {
                ViewerContainer.addEventListener(AppEvent.DATA_PUBLISH, sharedDataUpdated);
            }

            private function init():void
            {
                if (configXML)
                {
                    navtool.panwheelItem = new NavToolItem("PanWheel", "", configXML.panwheel.@visible == 'true');
                    navtool.zoomFullextItem = new NavToolItem(configXML.panwheel.@fullextlabel || getDefaultString("fullExtentLabel"), configXML.panwheel.@fullexticon, true);
                    navtool.pandownItem = new NavToolItem(configXML.panwheel.@pandownlabel || getDefaultString("panDownLabel"), "", true);
                    navtool.panleftItem = new NavToolItem(configXML.panwheel.@panleftlabel || getDefaultString("panLeftLabel"), "", true);
                    navtool.panrightItem = new NavToolItem(configXML.panwheel.@panrightlabel || getDefaultString("panRightLabel"), "", true);
                    navtool.panupItem = new NavToolItem(configXML.panwheel.@panuplabel || getDefaultString("panUpLabel"), "", true);
                    navtool.prevextItem = new NavToolItem(configXML.prevextbutton.@label || getDefaultString("previousExtentLabel"), "", configXML.prevextbutton.@visible == 'true');
                    navtool.nextextItem = new NavToolItem(configXML.nextextbutton.@label || getDefaultString("nextExtentLabel"), "", configXML.nextextbutton.@visible == 'true');
                    navtool.panItem = new NavToolItem(configXML.panbutton.@label || getDefaultString("panLabel"), configXML.panbutton.@icon, configXML.panbutton.@visible == 'true');
                    navtool.zoominItem = new NavToolItem(configXML.zoominbutton.@label || getDefaultString("zoomInLabel"), configXML.zoominbutton.@icon, configXML.zoominbutton.@visible == 'true');
                    navtool.zoomoutItem = new NavToolItem(configXML.zoomoutbutton.@label || getDefaultString("zoomOutLabel"), configXML.zoomoutbutton.@icon, configXML.zoomoutbutton.@visible == 'true');
                    navtool.initButtonBar();
                }
            }

            private function sharedDataUpdated(event:AppEvent):void
            {
                var data:Object = event.data;

                if (data.key == "Edit_Widget") // disable buttonbar when edit widget is opened
                {
                    if (data.collection[0])
                    {
                        map.cursorManager.removeAllCursors(); // make sure all custom cursors are removed
                        lastSelectedIndex = navtool.btnBar.selectedIndex;
                        navtool.btnBar.selectedIndex = 0;
                        navtool.btnBar.enabled = false;
                    }
                    else
                    {
                        navtool.btnBar.selectedIndex = lastSelectedIndex;
                        navtool.btnBar.enabled = true;
                    }
                }
            }
        ]]>
    </fx:Script>
    <Navigation:Navigation id="navtool"
                           alpha="{getStyle('contentBackgroundAlpha') / 2}"
                           map="{map}"
                           rollOut="fadeOut.play([navtool])"
                           rollOver="fadeOver.play([navtool])"/>
</viewer:BaseWidget>
