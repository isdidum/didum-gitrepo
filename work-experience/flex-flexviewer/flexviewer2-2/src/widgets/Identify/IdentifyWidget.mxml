<?xml version="1.0" encoding="utf-8"?>
<!--
	////////////////////////////////////////////////////////////////////////////////
	//
    // Version 2.2 - Dec. 17, 2010
    //
	// This is a modifcation of ESRI Identify widget that was for SFV 1.x.
    // It has been modified, to use new spark component and a item renderer.
    // This version allows you to specify praticular layers of a map service
    // to identify and the particular fields to display for those layers.
    // This version also supports hyperlinks.
    // This version truly honors the setting of visible in the xml config.
    // If using a featurelayer it will identify the mapserver that is the 
    // same as the featurelayer and just force indentification of the specified
    // layer if there was one.
	//
	// In v2.1.3 the option of keepidentifyactive has been added to allow you
	// to specify that the identify tool will remain active after each indentify
	// click on the map instead of the default behavior of defaulting back to map 
	// navigation. The zoom2message has been moved into the labels parent where it
	// belongs.
	//
	// In v2.1.4 the option for only identifying the specified layers has been added
	// onlythese="true"
	// Fix issue with feature type services that point to a MapService
	//
	// In v2.1.5 an issue with using FlexViewer draw tool is that the drawtooltips
	// could not be controlled by the widget. Deactivating it when closing the widget
	// did not function correctly. So in this version the widget uses it's own 
	// draw tool.
	//
	// In v2.1.6 an issue with not being able to click on the hyperlink in the info
	// popup window has been resolved. You will have to manually close the info
	// window your self now
	//
	// In v2.1.7 Erwan assisted with code to help those who have grouped layers 
	// returning duplicate results and another minor bug fix.
	//
    // In v2.2 Minor code fixes, to include issue with fields list not working
	// if you had spaces behind the comma. Proxy Capability added thanks to Alex Bostic
	//
	//
	// In v2.2.1 Depreciated selectionlabel in the IdentifyWidget.xml
	// Added Identify Configuration.pdf that explains all the IdentifyWidget.xml options
	//
	// Delevoped by Robert Scheitlin
    //
	////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:viewer="com.esri.viewer.*"
				   xmlns:Ident="widgets.Identify.*"
				   layout="absolute"
				   widgetConfigLoaded="init()"
				   currentState="StateIdentify">
	<fx:Declarations>
		<esri:SimpleLineSymbol id="ptOutline" style="solid" color="0xffffff" width="1" alpha="0.8"/>
		<esri:SimpleMarkerSymbol id="ptIdentify" style="circle" color="0x448ccb" size="12" outline="{ptOutline}"/>
		<esri:SimpleLineSymbol id="lineIdentify" style="solid" color="0x448ccb" width="12" alpha="0.8"/>
		<esri:SimpleFillSymbol id="polyIdentify" style="solid" color="0x448ccb" alpha="0.4" outline="{lineIdentify}"/>
	</fx:Declarations>
	
	<viewer:states>
		<s:State name="StateIdentify"/>
		<s:State name="resultsList"/>
	</viewer:states>
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<s:Fade targets="{[StateIdentify,resultsList]}"/>
		</s:Transition>
	</viewer:transitions>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.IdentifyEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.tasks.IdentifyTask;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.IdentifyParameters;
			import com.esri.ags.tasks.supportClasses.IdentifyResult;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.tools.NavigationTool;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.IInfowindowTemplate;
			import com.esri.viewer.ViewerContainer;
			
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.StateChangeEvent;
			import mx.formatters.NumberFormatter;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.components.supportClasses.ItemRenderer;
			
			//labels
			private var identifyLabel:String;
			
			private var resultsLabel:String;
			
			[Bindable]
			private var descriptionLabel:String;
			
			private var identifyLayerOption:String;
			
			private var identifyTolerance:Number = 3;
			
			[Bindable]
			private var pointLabel:String;
			
			[Bindable]
			private var clearLabel:String;	
			
			private var loadingLabel:String;	
			
			private var gra:Graphic;
			
			[Bindable]
			private var msgVisible:Boolean = false;
			
			private var zoomScale:Number = 5000;
			
			private var keepActive:Boolean;
			
			private var onlylistedlayers:Boolean;
			
			private var zoom2Msg:String;
			
			private var graphicsLayer:GraphicsLayer;
			
			private var graphicPointSym:PictureMarkerSymbol;
			
			private var identifyPoint:MapPoint;
			
			private var infoUrl:String;
			
			[Bindable]
			private var identifyArrayCollection:ArrayCollection;
			
			private var configIdentFields:Array;
			
			private var configIdentProxyLayers:Array;
			
			private const ICON_URL:String = "assets/images/";
			
			private var drawTool:DrawTool;
			
			private var proxyURL:String;
			
			private function init():void
			{
				graphicPointSym = new PictureMarkerSymbol(widgetIcon, 30, 30)
				graphicsLayer = new GraphicsLayer();
				graphicsLayer.symbol = graphicPointSym;
				map.addLayer(graphicsLayer);
				
				drawTool = new DrawTool();
				drawTool.map = map;
				drawTool.addEventListener(DrawEvent.DRAW_END, drawEnd);
				if (configXML)
				{
					//labels
					zoom2Msg = configXML.labels.zoom2message || "Click to Zoom to Point";
					identifyLabel = configXML.labels.identifylabel || "Identify";
					resultsLabel = configXML.labels.resultslabel || "Results";
					descriptionLabel = configXML.labels.descriptionlabel || "Use the identify tool to identify features on the map:";
					pointLabel = configXML.labels.pointlabel || "Identify";
					clearLabel = configXML.labels.clearlabel || "Clear";
					loadingLabel = configXML.labels.loadinglabel || "Loading...";
					infoUrl = configXML.info || "widgets/InfoTemplates/InfoPopupTemplate.swf";
					keepActive = toBoolean(configXML.keepidentifyactive.toString());
					onlylistedlayers = toBoolean(configXML.layers.@onlythese.toString());
					identifyLayerOption = configXML.identifylayeroption || IdentifyParameters.LAYER_OPTION_VISIBLE;
					if (Number(configXML.identifytolerance) > 0)
						identifyTolerance = Number(configXML.identifytolerance);				
					if (Number(configXML.defaultzoomscale) > 0)
						zoomScale = Number(configXML.defaultzoomscale);
						
					//HAB:get the proxy URL from the config file
					proxyURL = configXML.httpproxy;
					
					/*HAB:loop thru the layers that need a proxy and add them to 
					the proxy layer list array*/
					var proxyLyrList:XMLList = configXML..proxylayer;
					configIdentProxyLayers = [];
					for (var j:Number = 0; j < proxyLyrList.length(); j++)
					{
						var identProxyLayers:Object = 
							{
								name:proxyLyrList[j].name
							}
						configIdentProxyLayers.push(identProxyLayers);
					}
					
					configIdentFields = [];
					var lyrList:XMLList = configXML..layer;
					for (var i:Number = 0; i < lyrList.length(); i++)
					{
						var lyrLabel:String = lyrList[i].name;
						var lyrLinkField:String = lyrList[i].linkfield;
						var lyrLinkPre:String = lyrList[i].linkprefix;
						var lyrLinkSuffix:String = lyrList[i].linksuffix;
						var lyrFields:String = lyrList[i].fields;
						var lyrLinkIcon:String = lyrList[i].iconfield;
						var lyrLinkIconPre:String = lyrList[i].iconprefix;
						var lyrLinkIconSuffix:String = lyrList[i].iconsuffix;
						var lyrZoomScale:Number = Number(lyrList[i].zoomscale);
						var lyrForceScale:Boolean = Boolean(lyrList[i].forcescale);
						if(lyrZoomScale == 0)
							lyrZoomScale = zoomScale;
						var identLayer:Object = 
							{
								label: lyrLabel,
								linkpre: lyrLinkPre,
								linkfield: lyrLinkField,
								linksuffix: lyrLinkSuffix,
								linkiconpre: lyrLinkIconPre,
								linkicon: lyrLinkIcon,
								linkiconsuffix: lyrLinkIconSuffix,
								fields: lyrFields,
								zoomscale: lyrZoomScale,
								forcescale: lyrForceScale
							}
						configIdentFields.push(identLayer);
					}
					var data:Object = {
						id:     String(this.widgetId),
						url:    infoUrl,
						config: null
					};
					
					ViewerContainer.dispatchEvent(new AppEvent(AppEvent.DATA_CREATE_INFOWIDGET, data, infoReady));
				}
				
				wTemplate.addTitlebarButton(ICON_URL + "i_info.png", identifyLabel, showStateIdentify);
				wTemplate.addTitlebarButton(ICON_URL + "i_table.png", resultsLabel, showStateResults);
				activateIdentifyTool();
			}
			
			private function toBoolean(val:String):Boolean
			{
				if (val == "true") { return true; } else { return false; }
			}
			
			private function activateIdentifyTool():void
			{	
				var status:String = pointLabel;
				if(!drawTool)
					drawTool = new DrawTool();
				drawTool.showDrawTips = false;
				drawTool.markerSymbol = ptIdentify;
				drawTool.activate(DrawTool.MAPPOINT);	
			}
			
			private var infoTemplate:IInfowindowTemplate;
			
			private function infoReady(event:AppEvent):void
			{
				var id:Number = Number(event.data.id);
				if (id == this.widgetId)
				{
					infoTemplate = event.data.infoWidget;
				}
			}
			
			private function drawEnd(event:DrawEvent):void
			{
				clear();
				graphicsLayer.add(event.graphic);
				identifyPoint = event.graphic.geometry as MapPoint;
				identifyFeatures();
				if(keepActive)
					activateIdentifyTool();
			}								
			
			//identify features
			private function identifyFeatures():void
			{
				var identifyParams : IdentifyParameters = new IdentifyParameters();
				identifyParams.returnGeometry = false;
				identifyParams.tolerance = identifyTolerance;
				identifyParams.geometry = identifyPoint;
				identifyParams.width = map.width;
				identifyParams.height = map.height;
				identifyParams.mapExtent = map.extent;
				identifyParams.spatialReference = map.spatialReference;
				
				/**
				 * If you only want one layer of one particular map service and that is it, than you need 
				 * to look at the identifyFeatures function in the IdentifyWidget.mxml 
				 * and basically delete all the for loop and just hard-code the 
				 * identifyParams and identify task something like this:
				 */
				/* Code:
				private function identifyFeatures():void
				{
					var identifyParams : IdentifyParameters = new IdentifyParameters();
					identifyParams.returnGeometry = false;
					identifyParams.tolerance = identifyTolerance;
					identifyParams.geometry = identifyPoint;
					identifyParams.width = map.width;
					identifyParams.height = map.height;
					identifyParams.mapExtent = map.extent;
					identifyParams.spatialReference = map.spatialReference;
				//You have to know the id number of your layer here
					identifyParams.layerIds = [23];
					var identifyTask:IdentifyTask = new IdentifyTask("http://yourserver/arcgis/yourservice/mapserver);
					identifyTask.addEventListener(IdentifyEvent.EXECUTE_COMPLETE, onResult);
					identifyTask.addEventListener(FaultEvent.FAULT, onFault);
					identifyTask.execute(identifyParams);
					showMessage(loadingLabel, true); 
					showStateResults();
				}
				*/

				
				for (var i:Number = map.layerIds.length -1; i >= 0; i--)
				{
					identifyParams.layerOption = identifyLayerOption;
					var layer:Layer = map.getLayer(map.layerIds[i]);
					identifyParams.layerIds = null;
					var url:String = "";
					
					//HAB:Does this layer require a proxy???
					var useProxy:Boolean = false;
					
					
					//HAB:loop thru proxy layer list and determine which layer needs a proxy
					for(var p:int=0; p<configIdentProxyLayers.length; p++)
					{
						//HAB:set the proxy flag if needed
						if (layer.name == configIdentProxyLayers[p].name)
						{
							useProxy = true;
						}
					}
					
					if (layer is ArcGISDynamicMapServiceLayer)
					{
						var dynamicLayer:ArcGISDynamicMapServiceLayer = layer as ArcGISDynamicMapServiceLayer;
						url = dynamicLayer.url;
						if(identifyLayerOption == "visible")
						{
							if(dynamicLayer.visibleLayers){
								identifyParams.layerIds = dynamicLayer.visibleLayers.source;
								identifyParams.layerIds = new Array();
								for (var j:Number = 0; j < dynamicLayer.visibleLayers.source.length; j++)
								{
									if (!dynamicLayer.layerInfos[dynamicLayer.visibleLayers.source[j]].subLayerIds)
									{
										identifyParams.layerIds.push(dynamicLayer.visibleLayers.source[j]);
									}
								}
							}
							identifyParams.layerOption = "all";
							if(dynamicLayer.visible == false)
								url="";
						}
					}
					else if (layer is ArcGISTiledMapServiceLayer)
					{
						var tiledLayer:ArcGISTiledMapServiceLayer = layer as ArcGISTiledMapServiceLayer;
						url = tiledLayer.url;
						if(identifyLayerOption == "visible")
						{
							if(tiledLayer.visible == false)
								url="";
						}
					}
					else if (layer is FeatureLayer)
					{
						var featLayer:FeatureLayer = layer as FeatureLayer;
						url = featLayer.url;
						var layId:int = -1;
						var arcDL:ArcGISDynamicMapServiceLayer;
						
						if( url.indexOf("FeatureServer") > -1)
						{
							var msName:String = url.replace("FeatureServer","MapServer");
							arcDL = new ArcGISDynamicMapServiceLayer(msName.substring(0,msName.lastIndexOf("/")));
							url = arcDL.url;
							layId = parseInt(msName.substring(msName.lastIndexOf("/")+ 1));
						}else{
							arcDL = new ArcGISDynamicMapServiceLayer(url.substring(0,url.lastIndexOf("/")));
							layId = parseInt(url.substring(url.lastIndexOf("/")+ 1));
							url = arcDL.url;
						}
						
						if(identifyLayerOption == "visible")
						{
							if(layId != -1)
								identifyParams.layerIds = [layId];
							if(featLayer.visible == false)
								url="";
						}
					}
					
					if(url)
					{
						var identifyTask:IdentifyTask = new IdentifyTask(url);
						//HAB:apply proxy if needed
						if(useProxy)identifyTask.proxyURL = proxyURL;
						identifyTask.addEventListener(IdentifyEvent.EXECUTE_COMPLETE, onResult);
						identifyTask.addEventListener(FaultEvent.FAULT, onFault);
						identifyTask.execute(identifyParams);
						showMessage(loadingLabel, true); 
						showStateResults();   
					}
				}
			}
			
			// on result
			private var myAtts:Object;
			public var myAc:ArrayCollection = new ArrayCollection();
			private var idResultType:String;
			private var resultGraphic:Graphic;
			private var myFname:String;
			
			private function onResult(event:IdentifyEvent):void                
			{   
				try
				{
					processIdentifyResults(event.identifyResults);
				}
				catch (error:Error)
				{
					showMessage(error.message, false);
				}
			}
			
			//on fault
			private function onFault(event:FaultEvent):void
			{                    
				showMessage(event.fault.faultDetail, false);         
			}			
			
			//process identify results
			private function processIdentifyResults(identifyResults:Array):void
			{
//My stuff
				var cFormater:NumberFormatter = new NumberFormatter
				cFormater.precision = "2";
				cFormater.rounding = "nearest";
				cFormater.decimalSeparatorFrom = "."
				cFormater.decimalSeparatorTo = "."
				cFormater.useThousandsSeparator = "false";
//End my stuff			
				if(!identifyArrayCollection)
					identifyArrayCollection = new ArrayCollection();
				for each (var identifyResult:IdentifyResult in identifyResults)
				{
					var title:String = identifyResult.layerName;
					var obj:Object = identifyResult.feature.attributes;
					//var content:String = 'X & Y: ' + cFormater.format(identifyPoint.x) + ", " + cFormater.format(identifyPoint.y) + "\n";
					var content:String = "";
					var fld:String;
					var value:String;
					var link:String = "";
					var linkicon:String = "";
					var identFields:String = "";
					var identLinkPre:String = "";
					var identLinkField:String = "";
					var identLinkSuffix:String = "";
					var identLinkIcon:String = "";
					var identLinkIconPre:String = "";
					var identLinkIconSuffix:String = "";
					var identZoom:Number = 0;
					var identForceScale:Boolean = false;
					var idResult:IdResult = new IdResult();
					
					for(var i:int=0; i<configIdentFields.length; i++)
					{
						if (identifyResult.layerName == configIdentFields[i].label)
						{
							identLinkField = configIdentFields[i].linkfield;
							identFields = configIdentFields[i].fields;
							identLinkPre = configIdentFields[i].linkpre;
							identLinkSuffix = configIdentFields[i].linksuffix;
							identLinkIconPre = configIdentFields[i].linkiconpre;
							identLinkIcon = configIdentFields[i].linkicon;
							identLinkIconSuffix = configIdentFields[i].linkiconsuffix;
							identZoom = configIdentFields[i].zoomscale;
							identForceScale = configIdentFields[i].forcescale;
						}
					}
					
					if(identFields != "") {
						var fldArr:Array = StringUtil.trimArrayElements(identFields,",").split(",");
						for (var f:Number = 0; f < fldArr.length; f++) {
							try{	        	    		       
								value = obj[fldArr[f]].toString();
							} catch (error: Error){
								value = "";
							}
							if (fldArr[f].toUpperCase() == identLinkField.toUpperCase() || fldArr[f].toUpperCase() == identLinkIcon.toUpperCase()){
								if(fldArr[f].toUpperCase() == identLinkField.toUpperCase()){
									//concatenate
									link = identLinkPre + value + identLinkSuffix;
								}
								if(fldArr[f].toUpperCase() == identLinkIcon.toUpperCase()){
									//concatenate
									linkicon = identLinkIconPre + value + identLinkIconSuffix;
								}
							} else {
								content += fldArr[f] + ": " + value + "\n";
							}
						}
						idResult.icon = widgetIcon;
						idResult.title = identifyResult.layerName;
						idResult.content = content;
						if(link!="")
							idResult.link = link;
						idResult.point = identifyPoint;
						idResult.geometry = identifyPoint;
						idResult.zoomScale = identZoom;
						idResult.zoom2msg = zoom2Msg;
						if(linkicon!="")
							idResult.linkicon = linkicon;
						idResult.forceScale = identForceScale;
						identifyArrayCollection.addItem(idResult);
					} else {
						if(onlylistedlayers == false){
							for (fld in obj)
							{
								try{    		        	    		       
									value = obj[fld].toString();
								} catch (error: Error){
									value = "";
								}
								
								if (fld.toUpperCase() == identLinkField.toUpperCase())
								{
									link = value;
								} else {
									content += fld + ": " + value + "\n";
								}
							}
							idResult.icon = widgetIcon;
							idResult.title = identifyResult.layerName;
							idResult.content = content;
							if(link!="")
								idResult.link = link;
							idResult.point = identifyPoint;
							idResult.geometry = identifyPoint;
							idResult.zoomScale = identZoom;
							idResult.zoom2msg = zoom2Msg;
							if(linkicon!="")
								idResult.linkicon = linkicon;
							idResult.forceScale = identForceScale;
							identifyArrayCollection.addItem(idResult);
						}
					}
				}
				clearMessage();
			}
			
			private function clear():void
			{
				graphicsLayer.clear();
				clearMessage();
				identifyArrayCollection = null;
				identifyPoint = null;
				this.showInfoWindow(null);
				map.infoWindow.hide();
			}			
			
			
			private var hitimer:uint;
			
			private function mouseOverRecord(event:Event):void
			{
				var idResult:IdResult = ItemRenderer(event.target).data as IdResult;
				clearTimeout(hitimer);
				hitimer = setTimeout(showHighlight, 800, [idResult]);
			}			
			
			private function mouseOutRecord(event:Event):void
			{
				//Do nothing for now
			}
			
			private function clickRecord(event:Event):void
			{
				var idResult:IdResult = ItemRenderer(event.target).data as IdResult;
				if(idResult.forceScale.valueOf() == true){
					map.scale = idResult.zoomScale;
				}else{
					if (map.scale > idResult.zoomScale)
					{
						map.scale = idResult.zoomScale;
					}
				}
				map.centerAt(idResult.point as MapPoint);
			}			
			
			private function showHighlight(params:Array):void
			{
				var infoData:Object = params[0];
				var pt:MapPoint = infoData.point;
				showInfoWindow(params[0]);
			}			
			
			private function showMessage(msg:String, swfVisible:Boolean):void
			{
				txtMessage.text = msg;
				swfMessage.visible = swfVisible;
				msgVisible = true;
			}			
			
			private function clearMessage():void
			{
				msgVisible = false;
			}
			
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				this.showInfoWindow(null);
				map.infoWindow.hide();
				drawTool.deactivate();
				setMapNavigation(NavigationTool.PAN, "Pan Map");
			}
			
			private function widgetMinimizedHandler(event:Event):void
			{
				if(graphicsLayer)
					graphicsLayer.visible = false;
			}
			
			private function widgetOpenedHandler(event:Event):void
			{
				activateIdentifyTool();
				if(graphicsLayer)
					graphicsLayer.visible = true;
			}
			
			private function showStateIdentify():void
			{
				this.currentState = "StateIdentify";
			}				
			
			private function showStateResults():void
			{
				this.currentState = "resultsList";
				wTemplate.selectedTitlebarButtonIndex = 1; // used to indicate selected titlebar button when automatically switching state
			}
			
			
			override public function showInfoWindow(infoData:Object):void
			{
				if (infoData)
				{
					map.infoWindow.data     = infoData;
					map.infoWindow.content  = infoTemplate as UIComponent;
					map.infoWindow.label    = infoData.title || "no title";
					map.infoWindow.show(infoData.point);
				}
				else
				{
					map.infoWindow.hide();
				}
			}
		]]>
	</fx:Script>
	<viewer:WidgetTemplate id="wTemplate" closed="widgetClosedHandler(event)" open="widgetOpenedHandler(event)"
		minimized="widgetMinimizedHandler(event)" height="200" width="340">
		<s:Group id="StateIdentify" height="100%" width="100%" visible="false" visible.StateIdentify="true">
			<s:layout>
				<s:VerticalLayout gap="6" horizontalAlign="center"/>
			</s:layout>
			<mx:Text id="txtLabel" text="{descriptionLabel}" width="100%" textAlign="center"/>
			<mx:HBox horizontalAlign="center" width="100%" horizontalGap="15">
				<mx:Image click="{activateIdentifyTool()}" source="assets/images/i_draw_point.png" useHandCursor="true" buttonMode="true" toolTip="{pointLabel}" width="40" height="40"/>
				<mx:Image click="clear()" source="assets/images/i_clear.png" useHandCursor="true" buttonMode="true" toolTip="{clearLabel}" width="40" height="40"/>
			</mx:HBox>
		</s:Group>
		<s:Group id="resultsList" height="100%" width="100%"  visible.resultsList="true" visible="false">
			<s:layout>
				<s:VerticalLayout gap="1"/>
			</s:layout>
			<s:HGroup id="boxMessage"
					  includeInLayout="{msgVisible}"
					  visible="{msgVisible}"
					  width="100%">
				<mx:SWFLoader id="swfMessage"
							  source="assets/images/loader.swf"
							  visible="false"/>
				<s:Label id="txtMessage"
						 text=""
						 width="90%"/>
			</s:HGroup>
			<s:Scroller height="100%" width="100%">
				<Ident:IdResultDataGroup id="idResultDG"
											  dataProvider="{identifyArrayCollection}"
											  idResultClick="clickRecord(event)"
											  idResultOver="mouseOverRecord(event)"
											  idResultOut="mouseOutRecord(event)">
					<Ident:layout>
						<s:VerticalLayout gap="2"
										  horizontalAlign="justify"
										  useVirtualLayout="true"/>
					</Ident:layout>
				</Ident:IdResultDataGroup>
			</s:Scroller>
		</s:Group>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>