<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:esri="http://www.esri.com/2008/ags"
               creationComplete="application_creationCompleteHandler(event)"
               pageTitle="Editing a feature layer without the Editor component">

    <!--
         Most editing application will make use of Editor component (see Editor* samples).
         This sample only support a small subset of the functionality available with the
         Editor component.

         In this sample DrawTool, EditTool, TemplatePicker and some 'code' are used to
         create a starting point for a more custom editing application than what the
         Editor component provides.
    -->

    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.events.DrawEvent;
            import com.esri.ags.events.EditEvent;
            import com.esri.ags.events.FeatureLayerEvent;
            import com.esri.ags.events.MapMouseEvent;
            import com.esri.ags.events.TemplatePickerEvent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.layers.Layer;
            import com.esri.ags.layers.supportClasses.FeatureLayerDetails;
            import com.esri.ags.symbols.FillSymbol;
            import com.esri.ags.symbols.LineSymbol;
            import com.esri.ags.symbols.MarkerSymbol;
            import com.esri.ags.symbols.SimpleFillSymbol;

            import mx.controls.Alert;
            import mx.events.FlexEvent;
            import mx.rpc.events.FaultEvent;
            import mx.utils.ObjectUtil;

            [Bindable]
            private var selectedGraphic:Graphic = null;

            private var drawingComplete:Boolean;
            private var doNotAddFeature:Boolean;

            protected function application_creationCompleteHandler(event:FlexEvent):void
            {
                myTemplatePicker.featureLayers = [ incidentsPointLayer, incidentsLineLayer, incidentsPolygonLayer ];
                addEventListener(KeyboardEvent.KEY_DOWN, deleteKeyHandler);
            }

            protected function myTemplatePicker_selectedTemplateChangeHandler(event:TemplatePickerEvent):void
            {
                editTool.deactivate();
                if (event.selectedTemplate)
                {
                    switch (event.selectedTemplate.featureLayer.layerDetails.geometryType)
                    {
                        case (Geometry.MAPPOINT):
                        {
                            if (event.selectedTemplate.featureLayer.renderer)
                            {
                                drawTool.markerSymbol = event.selectedTemplate.featureLayer.renderer.getSymbol(event.selectedTemplate.featureTemplate.prototype);
                            }
                            else if (event.selectedTemplate.featureLayer.symbol)
                            {
                                drawTool.markerSymbol = event.selectedTemplate.featureLayer.symbol;
                            }

                            drawTool.activate(DrawTool.MAPPOINT);
                            break;
                        }
                        case (Geometry.POLYLINE):
                        {
                            if (event.selectedTemplate.featureLayer.renderer != null)
                            {
                                drawTool.lineSymbol = event.selectedTemplate.featureLayer.renderer.getSymbol(event.selectedTemplate.featureTemplate.prototype);
                            }
                            else if (event.selectedTemplate.featureLayer.symbol)
                            {
                                drawTool.lineSymbol = event.selectedTemplate.featureLayer.symbol;
                            }

                            drawTool.activate(DrawTool.POLYLINE);
                            break;
                        }
                        case (Geometry.POLYGON):
                        {
                            if (event.selectedTemplate.featureLayer.renderer != null)
                            {
                                drawTool.fillSymbol = event.selectedTemplate.featureLayer.renderer.getSymbol(event.selectedTemplate.featureTemplate.prototype);
                            }
                            else if (event.selectedTemplate.featureLayer.symbol)
                            {
                                drawTool.fillSymbol = event.selectedTemplate.featureLayer.symbol;
                            }

                            drawTool.activate(DrawTool.POLYGON);
                            break;
                        }
                    }
                }
                else
                {
                    drawTool.deactivate();
                }
            }

            protected function draw_drawEndHandler(event:DrawEvent):void
            {
                if (event.graphic.geometry.type == Geometry.EXTENT) // selecting features within an extent
                {
                    for each (var layer:Layer in map.layers)
                    {
                        if (layer is FeatureLayer)
                        {
                            selectionQuery.geometry = event.graphic.geometry;
                            FeatureLayer(layer).selectFeatures(selectionQuery, FeatureLayer.SELECTION_NEW);
                        }
                    }
                    drawTool.deactivate();
                }
                else // creating new features
                {
                    drawingComplete = true;
                    doNotAddFeature = false;

                    //allows listening to the layer click handler before adding features to the feature layer
                    callLater(addFeatureToFeatureLayer, [ event.graphic ]);
                }
            }

            protected function layer_clickHandler(event:MouseEvent):void
            {
                drawTool.deactivate();

                if (!drawingComplete) //just selection
                {
                    if (event.target is Graphic)
                    {
                        if (selectedGraphic != null)
                        {
                            (selectedGraphic.parent as FeatureLayer).applyEdits(null, [ selectedGraphic ], null);
                        }
                        selectedGraphic = Graphic(event.target);
                        editTool.activate(EditTool.EDIT_VERTICES | EditTool.MOVE, [ selectedGraphic ]);
                        map.addEventListener(MapMouseEvent.MAP_CLICK, map_mapClickHandler);
                    }
                }
                else
                {
                    drawingComplete = false;
                    if (event.currentTarget == incidentsPointLayer)
                    {
                        doNotAddFeature = true; // dont add feature to the feature layer if there is one underneath already
                    }
                }
            }

            private function addFeatureToFeatureLayer(graphic:Graphic):void
            {
                if (!doNotAddFeature && myTemplatePicker.selectedTemplate)
                {
                    if (myTemplatePicker.selectedTemplate.featureTemplate)
                    {
                        var newAtttrs:* = ObjectUtil.copy(myTemplatePicker.selectedTemplate.featureTemplate.prototype.attributes);
                        var newGraphic:Graphic = new Graphic(graphic.geometry, null, newAtttrs);
                        myTemplatePicker.selectedTemplate.featureLayer.applyEdits([ newGraphic ], null, null);
                    }
                    else
                    {
                        myTemplatePicker.selectedTemplate.featureLayer.applyEdits([ graphic ], null, null);
                    }
                }
            }

            private function deleteKeyHandler(event:KeyboardEvent):void
            {
                // remove any selected features when delete key is pressed
                if (event.keyCode == Keyboard.DELETE)
                {
                    if (selectedGraphic != null)
                    {
                        (selectedGraphic.parent as FeatureLayer).applyEdits(null, null, [ selectedGraphic ]);
                        selectedGraphic = null;
                    }
                    else
                    {
                        for each (var layer:Layer in map.layers)
                        {
                            if (layer is FeatureLayer && FeatureLayer(layer).selectedFeatures.length > 0)
                            {
                                // Exercise for developer - "simplify" geometry before sending them to server (in case users draws invalid geometries)
                                FeatureLayer(layer).applyEdits(null, null, FeatureLayer(layer).selectedFeatures);
                            }
                        }
                    }
                }
            }

            protected function map_mapClickHandler(event:MapMouseEvent):void
            {
                if (selectedGraphic != null)
                {
                    (selectedGraphic.parent as FeatureLayer).applyEdits(null, [ selectedGraphic ], null);
                    map.removeEventListener(MapMouseEvent.MAP_CLICK, map_mapClickHandler);
                    editTool.deactivate();
                }
            }

            protected function flayer_faultHandler(event:FaultEvent):void
            {
                Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "FeatureLayer Fault " + event.fault.faultCode);
                trace("f: " + event.toString());
            }

            protected function flayer_editsCompleteHandler(event:FeatureLayerEvent):void
            {
                trace("e: " + event.toString());

            }

            protected function selectFeatures_clickHandler(event:MouseEvent):void
            {
                myTemplatePicker.clearSelection();

                drawTool.fillSymbol = new SimpleFillSymbol;
                drawTool.activate(DrawTool.EXTENT);
            }


            protected function clearSelection_clickHandler(event:MouseEvent):void
            {
                for (var i:Number = 0; i < map.layers.length; i++)
                {
                    if (map.layers[i] is FeatureLayer && FeatureLayer(map.layers[i]).selectedFeatures.length > 0)
                    {
                        FeatureLayer(map.layers[i]).clearSelection();
                    }
                }
            }

            private function editTool_vertexAddDeleteMoveHandler(event:EditEvent):void
            {
                applyEdits(event.graphic);
            }

            private function editTool_graphicsMoveHandler(event:EditEvent):void
            {
                // only one graphic is moved at a time
                applyEdits(event.graphics[0]);
            }

            private function applyEdits(graphic:Graphic):void
            {
                // applyEdits
                FeatureLayer(graphic.graphicsLayer).applyEdits(null, [ graphic ], null);
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <esri:DrawTool id="drawTool"
                       drawEnd="draw_drawEndHandler(event)"
                       map="{map}"/>
        <esri:EditTool id="editTool"
                       graphicsMoveStop="editTool_graphicsMoveHandler(event)"
                       map="{map}"
                       vertexAdd="editTool_vertexAddDeleteMoveHandler(event)"
                       vertexDelete="editTool_vertexAddDeleteMoveHandler(event)"
                       vertexMoveStop="editTool_vertexAddDeleteMoveHandler(event)"/>
        <esri:Query id="selectionQuery"/>
    </fx:Declarations>

    <mx:HDividedBox width="100%" height="100%">
        <s:Group width="70%" height="100%">
            <esri:Map id="map">
                <esri:extent>
                    <esri:Extent xmin="-13697000" ymin="4496000" xmax="-13551000" ymax="4599000">
                        <esri:SpatialReference wkid="102100"/>
                    </esri:Extent>
                </esri:extent>
                <esri:ArcGISTiledMapServiceLayer url="http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer"/>
                <esri:FeatureLayer id="incidentsPolygonLayer"
                                   click="layer_clickHandler(event)"
                                   editsComplete="flayer_editsCompleteHandler(event)"
                                   fault="flayer_faultHandler(event)"
                                   mode="onDemand"
                                   url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/HomelandSecurity/operations/FeatureServer/2"/>
                <esri:FeatureLayer id="incidentsLineLayer"
                                   click="layer_clickHandler(event)"
                                   editsComplete="flayer_editsCompleteHandler(event)"
                                   fault="flayer_faultHandler(event)"
                                   mode="onDemand"
                                   url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/HomelandSecurity/operations/FeatureServer/1"/>
                <esri:FeatureLayer id="incidentsPointLayer"
                                   click="layer_clickHandler(event)"
                                   editsComplete="flayer_editsCompleteHandler(event)"
                                   fault="flayer_faultHandler(event)"
                                   mode="onDemand"
                                   url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/HomelandSecurity/operations/FeatureServer/0"/>
            </esri:Map>
            <s:Button id="selectFeatures"
                      height="30"
                      right="20" top="10"
                      click="selectFeatures_clickHandler(event)"
                      fontSize="14"
                      label="Select features by rectangle"/>
            <s:Button id="clearSelection"
                      height="30"
                      right="20" top="50"
                      click="clearSelection_clickHandler(event)"
                      fontSize="14"
                      label="Clear Selection"/>
        </s:Group>
        <s:BorderContainer width="300" height="100%">
            <s:borderStroke>
                <s:SolidColorStroke weight="3"/>
            </s:borderStroke>
            <esri:TemplatePicker id="myTemplatePicker"
                                 width="100%" height="99%"
                                 enabled="{incidentsPolygonLayer.loaded}"
                                 selectedTemplateChange="myTemplatePicker_selectedTemplateChangeHandler(event)"/>
        </s:BorderContainer>
    </mx:HDividedBox>
</s:Application>
