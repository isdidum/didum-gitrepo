<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
	xmlns:esri="http://www.esri.com/2008/ags"
	pageTitle="Enhanced Identify Lidar"
	creationComplete="startDrawTool();"> 
	
	<!--Abraham, Didum:May 31, 2011-->
	
	<fx:Script>
		<![CDATA[			
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.symbols.InfoSymbol;
			import com.esri.ags.tasks.supportClasses.IdentifyParameters;
			import com.esri.ags.tasks.supportClasses.IdentifyResult;
			import com.esri.ags.tools.DrawTool;
			
			/*import flash.events.KeyboardEvent;*/
			import flash.net.navigateToURL;
			import DeePackage.myAdvDGUtil;
			/*import DeePackage.myAdvDGUtil2;
			import flash.system.System;*/
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextArea;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.rpc.AsyncResponder;
			
			
			private var myDrawTool:DrawTool;
			private var myGeometry:Geometry;
			private var identifyParams:IdentifyParameters;
			[Bindable]private var lastIdentifyResultGraphic:Graphic;
			[Bindable]private var myFeatures:ArrayCollection;
			[Bindable]private var dgToolTip:String;
			[Bindable]private var getTitle:String = "Features : 0";
			//getTxt was "Ctrl/Shift for multiple selection" iff(allowMultipleSelection=true) for myListCols
			[Bindable]private var getTxt:String = "";
			[Bindable]private var myListColsLabels:Array = [{label:"Count"}, {label:"Name"}, {label:"Click"}];
				
				
			
			private function startDrawTool():void {
				myDrawTool = new DrawTool();
				myDrawTool.map = myMap;		  
				myTbb.addEventListener(ItemClickEvent.ITEM_CLICK, activateClick);
				myDrawTool.addEventListener(DrawEvent.DRAW_END, onDrawEnd);
			}
			
			private function activateClick(event:ItemClickEvent):void {
				if(!myDrawTool)
					myDrawTool = new DrawTool();
				myDrawTool.graphicsLayer = myGraphicsLayer; //added
				myDrawTool.fillSymbol = sfs;
				myDrawTool.markerSymbol = sms;
				myDrawTool.lineSymbol = sls;
				myDrawTool.showDrawTips = true;
				if(myTbb.selectedIndex < 0) {
					myDrawTool.deactivate();
				} else {
					switch (event.item.label)
					{
						case "MAPPOINT": {
							myTbb.toolTip = "Point";
							myDrawTool.activate(DrawTool.MAPPOINT);
							break;
						}
						case "POLYLINE": {
							myTbb.toolTip = "Polyline";
							myDrawTool.activate(DrawTool.POLYLINE);
							break;
						}
						case "POLYGON": {
							myTbb.toolTip = "Polygon";
							myDrawTool.activate(DrawTool.POLYGON);
							break;
						}
						case "EXTENT": {
							myTbb.toolTip = "Extent";
							myDrawTool.activate(DrawTool.EXTENT);
							break;
						}
						case "CLEAR": {
							myTbb.toolTip = "Clear"
							myGraphicsLayer.clear();
							//myTxtArea.visible = false;
							myGrid.dataProvider = null;
							bPanel.title = "Feature : 0";
						}	
					}
				}
			}
			
			private function onDrawEnd(event:DrawEvent):void {
				clearMap();
				myGraphicsLayer.add(event.graphic);
				myGeometry = event.graphic.geometry as Geometry;
				myDrawTool.deactivate();	//1, all added
				myTbb.selectedIndex = -1;	//2
				myTbb.toolTip = null;		//3
				mapIdentify();
			}
			
			private function clearMap():void {
				myGeometry = null;
				myDrawTool.deactivate(); //added 6-14-2011
				myGraphicsLayer.clear();
			}
			
			private function mapIdentify():void {
				//myGraphicsLayer.clear();  //delete
				
				identifyParams = new IdentifyParameters();
				identifyParams.tolerance = 3;
				identifyParams.returnGeometry = true;
				identifyParams.geometry = myGeometry; //event.mapPoint;
				identifyParams.mapExtent = myMap.extent;
				identifyParams.width = myMap.width;
				identifyParams.height = myMap.height;
				identifyParams.layerIds = [0];
				identifyParams.spatialReference = myMap.spatialReference;
				//identifyParams.layerOption = "visible"; //IdentifyParameters.LAYER_OPTION_ALL;
				startExecutionNow();
			}
			
			private function startExecutionNow():void {	
				identifyTask.execute(identifyParams, new AsyncResponder(myResultFunction, myFaultFunction, null));
			}
			
			private function myResultFunction(results:Array, token:Object=null/*clickGraphic:Graphic=null*/):void {
				if(results && results.length > 0) {
					var result:IdentifyResult = results[0];
					var resultGraphic:Graphic = result.feature;
					
					var setGeom:Geometry = myGeometry;// as Geometry;
					//var myPoint:Point = myMap.toScreen(setGeom);
					
					var myLabel:String, infoWinText:String;
					switch(resultGraphic.geometry.type) {
						case Geometry.POLYGON: {
							/* WAY-I
							var resultStr:Array = []; 
							for(var i:int=0; i<results.length; i++) { 
							myLabel = "LiDAR Tile  (length = " + (i+1) + ")";
							resultStr[i] = "[" + (i+1) + "].   <a href='" + results[i].feature.attributes.PATH + "'>" + results[i].feature.attributes.NAME + "</a>";
							}
							infoWinText = resultStr.join("<br />");
							//WAY-II
							var myResults:Array = [];
							for (var i:int = 0; i<results.length; i++) {
							myResults[i] = results[i].feature.attributes;
							}
							myGrid.dataProvider = myResults;  
							bPanel.title = "Features : " + results.length;
							*/
							//WAY-III
							myFeatures = new ArrayCollection();
							for(var k:int = 0; k < results.length; k++) {									
								myFeatures.addItem({
									COUNT: (k+1),
									NAME: results[k].feature.attributes.PATH,	//was .NAME
									myBTN: results[k].feature.attributes.PATH
								});
							}
							myGrid.visible = true;
							getTitle = "Features : " + results.length;
							dgToolTip = "Select Shift/Ctrl + MouseClick to highlight cell data,";
							dgToolTip += "\n\tCtrl + C  to copy data,";
							dgToolTip += "\n\tand Ctrl + V to paste.";
							break;
						}
					}
					lastIdentifyResultGraphic = resultGraphic;
					
					//myTxtArea.visible = true;
					//myTxtArea.htmlText = infoWinText; //could use myTxtArea.text = infoWindowText w/o html tags					
				}
			}
			private function myFaultFunction(error:Object, token:Object=null):void {
				Alert.show(String(error), "Identify Error");
			}

			protected function onItemClick(event:ListEvent):void {
				var myListColsCntr:int = myListCols.selectedItems.length; //changes with change in event
				var getName:Object = myListCols.selectedItem;
				var getString:String = getName.label;
				switch(event.columnIndex){ 
					case 0: {
						if(event.columnIndex === 0 && myListColsCntr === 1 && getString === "Click"){
							showdgToolTip(false);
							var myObj6:Object = event.itemRenderer.data.NAME;
							navigateToURL(new URLRequest(myObj6.toString()), '_blank');
							Alert.show("Column2 = (" + event.rowIndex + "," + event.columnIndex 
								+ ")--ListCC="+myListColsCntr + "--myListCols = " + getString);
						} else if(event.columnIndex === 0 && myListColsCntr === 2 && getString === "Name"){
							showdgToolTip(false); // was true
							"";
							Alert.show("Column2_1 = (" + event.rowIndex + "," + event.columnIndex 
								+ ")--ListCC="+myListColsCntr + "--myListCols = " + getString);	
						} else if(event.columnIndex === 0 && myListColsCntr === 1 && getString === "Name"){
							showdgToolTip(false); // was true
						} else if(event.columnIndex === 0 && myListColsCntr === 1 && getString === "Count"){
							showdgToolTip(false);
							Alert.show("Column2_2 = (" + event.rowIndex + "," + event.columnIndex 
								+ ")--ListCC="+myListColsCntr + "--myListCols = " + getString);	
						}	
						break;
					}
					case 1: {
						if(event.columnIndex === 1 && myListColsCntr === 2 && getString === "Name"){ 
							//default setting of myListCols
							showdgToolTip(false);
							Alert.show("Column0 = (" + event.rowIndex + "," + event.columnIndex 
								+ ")--ListCC="+myListColsCntr + "--myListCols = " + getString);
							var myObj3:Object = event.itemRenderer.data.NAME;
							navigateToURL(new URLRequest(myObj3.toString()), '_blank');
						}else if(event.columnIndex === 1 && myListColsCntr === 3&& getString === "Count"){
							showdgToolTip(false); //was true
							Alert.show("Column0_1 = (" + event.rowIndex + "," + event.columnIndex 
								+ ")--ListCC="+myListColsCntr + "--myListCols = " + getString);
							"";
						} 
						break;
					}
					case 2: {
						//show all setting of myListCols
						if(event.columnIndex === 2 && myListColsCntr === 3 && getString === "Count"){
							//if WAY-II, use myGrid.selectedItem.PATH  //var myStr:String = myGrid.selectedItem.NAME; //was.PATH
							showdgToolTip(false);
							var myObj:Object = event.itemRenderer.data.NAME;
							navigateToURL(new URLRequest(myObj.toString()), '_blank');
							Alert.show("Column1 = (" + event.rowIndex + "," + event.columnIndex 
								+ ")--ListCC="+myListColsCntr + "--myListCols = " + getString);
						}
						break;
					}	
				}
			}
			
			private function showdgToolTip(myToolTip:Boolean = true):String {
				var myString:String;
				if(myToolTip){
					myGrid.toolTip = dgToolTip;
					myString = myGrid.toolTip;
					//Alert.show("tooltip is true");
				} else {
					myGrid.toolTip = "";
					myString = myGrid.toolTip;
					//Alert.show("tooltip is false");
				}
				return myString;
			}
						
			
			//http://livedocs.adobe.com/flex/3/html/help.html?content=advdatagrid_05.html
			/*protected function myKeyUpHandler(event:KeyboardEvent):void {
				var keycode_c:uint = 67; //this is letter C 
				if(event.ctrlKey && event.keyCode === keycode_c) {
					//seperator used between strings
					var separator:String = "\n"; //","; googled escape characters for flex
					//the string sent to clipboard
					var dataString:String = "";
			
					var getLength:int = event.currentTarget.selectedCells.length;
					for (var i:int = 0; i < getLength; i++) {
			
						var cell:Object = event.currentTarget.selectedCells[i];
						// Get the row for the selected cell.
						var data:Object = event.currentTarget.dataProvider[cell.rowIndex];
					
						// Get the name of the field for the selected cell.
						var dataField:String = event.currentTarget.columns[cell.columnIndex].dataField;
							
						// Get the cell data using the field name.
						dataString = data[dataField] + separator + dataString;
					}
					// Remove trailing separator.
					dataString = dataString.substr(0, dataString.length - separator.length);
			
					// Write dataString to the clipboard.
					System.setClipboard(dataString);
				} 
			}*/
			
			private function hideShowMyGridCols():void {
				var myAdvGridCol:Array = myGrid.columns;
				var myMxListCols:Array =  myListCols.selectedItems; 
				var myAdvDGClassCol:AdvancedDataGridColumn;
				var myGridHeaderTxtLbl:String; 
				var myListColsLbls:String;
				var colsVisible:Boolean
				for (var i:int=0;i<myAdvGridCol.length;i++)  {
					colsVisible = false
					myAdvDGClassCol = myAdvGridCol[i];
					myGridHeaderTxtLbl = myAdvDGClassCol.headerText; 
					for (var j : int = 0; j < myMxListCols.length; j++)  {
						if(myMxListCols[j] == null) continue;
						myListColsLbls = myMxListCols[j].label;
						if (myListColsLbls === myGridHeaderTxtLbl)  {
							colsVisible = true;
							break;
						}			  
					}       
					if (colsVisible) {
						myAdvDGClassCol.visible = true;
						//myGrid.addEventListener(ListEvent.ITEM_CLICK, onItemClick);
					} else  {
						myAdvDGClassCol.visible = false;
						//myGrid.removeEventListener(ListEvent.ITEM_CLICK, onItemClick);
					}
				}
			}
			
			private function showAll():void {
				myListCols.selectedIndices = [0,1,2];
				hideShowMyGridCols();
			}
			
			private function hideAll():void {
				myListCols.selectedIndices = [];
				hideShowMyGridCols();
			}
			
			private function setDefault():void {
				myListCols.selectedIndices = [1,2];
				hideShowMyGridCols();
			}
			
			public var cntr:int=0;
			private function handleDivderRelease():void {
				if(cntr == 0) {
					myControlBox.width = 0;
				} else if(cntr == 1) {
					myControlBox.width = 120;
				}
				cntr = (cntr + 1) % 2;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace esri "http://www.esri.com/2008/ags";
		@namespace components "com.esri.ags.components.*";
		
		components|InfoWindow {
			content-background-alpha : 1.0; 
			background-color : #00FFFF; /*was yellow*/
			background-alpha : 0.8;
			color : black;
			border-style : solid;
		}
	</fx:Style>
	
	<fx:Declarations>
		
		<!-- Identify Task concurrency="last" -->
		<esri:IdentifyTask id="identifyTask" concurrency="last" 
			url="http://geonexus/ArcGIS/rest/services/LiDAR/LiDAR/MapServer" />
		<!--Basemap iExtent-->
		<esri:Extent id="myExtB" xmin="-10884964.57" ymin="4660003.62" xmax="-9907264.87" ymax="5649404.52" spatialReference="{new SpatialReference(102113)}" />
		
		<esri:SimpleMarkerSymbol id="sms" color="0x00FF00" size="12" style="circle"/>
		
		<!-- Symbol for all line shapes -->
		<esri:SimpleLineSymbol id="sls" width="3" color="0x00FF00"/>
		
		<!-- Symbol for all polygon shapes -->
		<esri:SimpleFillSymbol id="sfs" color="0x5B5BFF" style="solid">
			<esri:outline>
				<esri:SimpleLineSymbol width="1" color="0x00FF00"/>
			</esri:outline>
		</esri:SimpleFillSymbol>
		
	</fx:Declarations>
	
	<!--main panel-->
	<s:Panel id="mainPanel" title="Lidar Web Map Application" height="100%" width="100%" color="0x000000" borderVisible="true" 
		backgroundColor="0xFFFFFF" direction="ltr" left="0" right="0" bottom="0" top="0">
		<mx:HDividedBox id="vDivBox" width="100%" height="100%">
			<esri:Map id="myMap" extent="{myExtB.expand(1)}" logoVisible="false"
				openHandCursorVisible="false" left="0" right="0" top="0" bottom="0" verticalCenter="-16" horizontalCenter="0">
				
				<esri:ArcGISTiledMapServiceLayer url="http://geonexus/ArcGIS/rest/services/Basemap/Basemap/MapServer"
					visible="{gID.selectedIndex == 0}" alpha="8.5"/>
				<esri:ArcGISImageServiceLayer url="http://geonexus/ArcGIS/rest/services/Imagery_Statewide/NAIP2009_Mercator/ImageServer"
					visible="{gID.selectedIndex == 1}" alpha="0.50"/>
				<esri:ArcGISDynamicMapServiceLayer url="http://geonexus/ArcGIS/rest/services/LiDAR/LiDAR/MapServer" visible="true" alpha="0.45" />
				<esri:GraphicsLayer graphicProvider="{lastIdentifyResultGraphic}"/> 
				<esri:GraphicsLayer id="myGraphicsLayer"/>
			</esri:Map>
			
			<!--MyTextArea 
			<mx:TextArea id="myTxtArea" width="300" height="500" editable="false" top="10"/>
			-->
			
			<mx:Panel id="bPanel" title="{getTitle}" width="350" height="600" color="0x999999">
				
				<mx:HDividedBox height="100%" width="100%" dividerRelease="handleDivderRelease();">
					<mx:VBox id="myControlBox" width="95" height="100%" verticalGap="0" horizontalScrollPolicy="off">
						<mx:Label text="Selected columns" fontWeight="bold" />
						<mx:List id="myListCols" width="95" height="100%" dataProvider="{myListColsLabels}"
							labelField="label" borderColor="#000000"
							allowMultipleSelection="false" click="hideShowMyGridCols();"
							selectedIndices="[1,2]"/>
						<mx:TextArea wordWrap="true" selectable="false" editable="false" borderStyle="none"
							text="{getTxt}" width="95" height="100"/>
						<mx:Spacer height="5" />
						<mx:Button label="Show all"  width="95" click="showAll();"/>
						<mx:Button label="Default"  width="95" click="setDefault();"/>
						<mx:Button label="Hide all" width="95" click="hideAll();"/>
						<!--<mx:Button label="Copy (CSV)" width="95" click="myAdvDGUtil.xptADGToCpBrd(myGrid, false, myChkBx.selected);"/>-->
						<mx:Button label="Copy (XLS)" width="95" click="myAdvDGUtil.xptADGToCpBrd(myGrid, false, myChkBx.selected);"/>
						
						<mx:CheckBox id="myChkBx" label="Only Selected" color="#000000"/>
					</mx:VBox>
				
					<mx:VBox width="100%" height="100%">
						<!--keyUp="myKeyUpHandler(event);" allowMultipleSelection="true" selectionMode="multipleCells"-->
						<mx:AdvancedDataGrid id="myGrid" width="100%" height="100%" visible="false" color="0x006699"
							editable="false" itemClick="onItemClick(event);" dataProvider="{myFeatures}"
							selectedIndex="0" selectable="true"
							allowMultipleSelection="true">
							<mx:columns>
								<mx:AdvancedDataGridColumn width="18" headerText="Count" dataField="COUNT" visible="false"/>
								<mx:AdvancedDataGridColumn width="130" headerText="Name" dataField="NAME" visible="true"/>
								<mx:AdvancedDataGridColumn width="30" headerText="Click" dataField="myBTN" visible="true">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Button fontWeight="bold" label="Open" labelPlacement="right" 
												paddingLeft="5" color="0x000000"/><!--
												selected="{(data.myBTN === 'false')?true:false}"
												click="{data.myBTN = (data.myBTN !== 'false')?'true':'false';}" /-->
										</fx:Component>
									</mx:itemRenderer>
								</mx:AdvancedDataGridColumn>
							</mx:columns>
						</mx:AdvancedDataGrid>
						<!--for RadioButton http://blog.flexexamples.com/2008/01/27/using-a-checkbox-control-as-a-list-item-renderer-in-flex/-->
					</mx:VBox>
				</mx:HDividedBox>
			</mx:Panel>
			
		</mx:HDividedBox>	
	</s:Panel>
	
	<s:ButtonBar id="gID" right="5" selectedIndex="0" top="5">
		<s:dataProvider>
			<s:ArrayList>
				<fx:String>Normal Bmap</fx:String>
				<fx:String>Imagery Naip</fx:String>				
			</s:ArrayList>
		</s:dataProvider>
	</s:ButtonBar>
	
	<!--MyButtonBar-->
	<s:controlBarLayout>
		<s:HorizontalLayout horizontalAlign="center" paddingTop="5" paddingBottom="5"/>
	</s:controlBarLayout>
	<s:controlBarContent>
		<mx:ToggleButtonBar id="myTbb" itemClick="activateClick(event);"
			labelField="null" selectedIndex="-1" toggleOnClick="true">
			<fx:Object icon="@Embed(source='assets/i_draw_point.png')" label="MAPPOINT"/>
			<fx:Object icon="@Embed(source='assets/i_draw_line.png')" label="POLYLINE"/>
			<fx:Object icon="@Embed(source='assets/i_draw_poly.png')" label="POLYGON"/>
			<fx:Object icon="@Embed(source='assets/i_draw_rect.png')" label="EXTENT"/>
			<fx:Object icon="@Embed(source='assets/images/i_clear_search.png')" label="CLEAR"/>
		</mx:ToggleButtonBar>
	</s:controlBarContent>
	
</s:Application>